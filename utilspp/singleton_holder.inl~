/*
 *    Copyright (c) <2002-2004> <Jean-Philippe Barrette-LaPierre>
 *    
 *    Permission is hereby granted, free of charge, to any person obtaining
 *    a copy of this software and associated documentation files 
 *    (cURLpp), to deal in the Software without restriction, 
 *    including without limitation the rights to use, copy, modify, merge,
 *    publish, distribute, sublicense, and/or sell copies of the Software,
 *    and to permit persons to whom the Software is furnished to do so, 
 *    subject to the following conditions:
 *    
 *    The above copyright notice and this permission notice shall be included
 *    in all copies or substantial portions of the Software.
 *    
 *    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 *    OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 *    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
 *    IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY 
 *    CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, 
 *    TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 *    SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

#ifndef SINGLETON_HOLDER_INL
#define SINGLETON_HOLDER_INL

template
<
class T,
template < class > class T_creation_policy,
template < class > class T_lifetime_policy,
template < class > class T_threading_model
>
T&
utilspp::singleton_holder
<
T,
T_creation_policy,
T_lifetime_policy,
T_threading_model
>
::instance()
{
    if ( m_instance == NULL )
    {
        make_instance();
    }

    return ( *m_instance );
};

template
<
class T,
template < class > class T_creation_policy,
template < class > class T_lifetime_policy,
template < class > class T_threading_model
>
void
utilspp::singleton_holder
<
T,
T_creation_policy,
T_lifetime_policy,
T_threading_model
>::make_instance()
{
    typename T_threading_model< T >::lock guard;
(void)guard;

    if ( m_instance == NULL )
    {
        if ( m_destroyed )
        {
            T_lifetime_policy< T >::on_dead_reference();
            m_destroyed = false;
        }

        m_instance = T_creation_policy< T >::create();
        T_lifetime_policy< T >::schedule_destruction( m_instance, &destroy_singleton );
    }
}

template
<
class T,
template < class > class T_creation_policy,
template < class > class T_lifetime_policy,
template < class > class T_threading_model
>
void
utilspp::singleton_holder
<
T,
T_creation_policy,
T_lifetime_policy,
T_threading_model
>
::destroy_singleton()
{
    assert( !m_destroyed );
    T_creation_policy< T >::destroy( m_instance );
    m_instance = NULL;
    m_destroyed = true;
}

template < class T,
template < class > class C,
template < class > class L,
template < class > class M
>
typename utilspp::singleton_holder< T, C, L, M>::instance_type
utilspp::singleton_holder< T, C, L, M >::m_instance;

template
<
class T,
template < class > class C,
template < class > class L,
template < class > class M
>
bool utilspp::singleton_holder< T, C, L, M >::m_destroyed;

#endif
