/* Generated by Together */

#ifndef VIDEODEVICE_H
#define VIDEODEVICE_H
#include <sys/types.h>
#include <sys/stat.h>
#include <linux/fs.h>
#include <linux/kernel.h>
#include <linux/videodev.h>
#include <string>
#include <stdlib.h>
#include <stdio.h>
#include <sys/ioctl.h>
#include <fcntl.h>
//#include <jpeglib.h>


//! VideoDevice
/*!
 * This class uses V4L to mange the webcam: capture, access to webcam proprieties...
 */
class VideoDevice {
public:


    //! Constructor
    VideoDevice(char* srcName);


    //! Destructor
    ~VideoDevice();


    //! Method to get the name of the video source (i.e. "/dev/video0" ).
    /*!
     * \return the name of the video source
     */
    char* getName();


    //! Method to get file descriptor
    /*!
     * \return the file descriptor int
     */
    int getFileDescript();


    //! Method to initiate the device
    /*!
     * \param srcName the name of the video source
     * \return the file descriptor int
     */
    void initDevice(char* srcName);
    
    
    //! Method to open the video source (query camera)
    /*!
     * \return a bool representing the success of the opening of the video source 
     */
    bool openDevice();
    

    //! Method to close the video source
    /*!
     * \return a bool representing the success of the closing of the video source 
     */
    bool closeDevice();


    //! Method to get all video capabilities
    /*!
     * \return structure representing the video capabilities
     */
    v4l2_capability* getVideoCapability();


    //! Method to set all video capabilities
    /*!
     * \param videoCapability the attribute to change
     * \return a bool representing the success of parameters changing
     */
    bool setVideoCapability(v4l2_capability* videoCapability);


    //! Method to get video picture parameters
    /*!
     * \return structure representing the video capabilities
     */
    video_picture* getVideoPicture();


    //! Method to set video picture parameters
    /*!
     * \param videoPicture the attribute to change
     * \return a bool representing the success of parameters changing
     */
    bool setVideoPicture(video_picture* videoPicture);


    //! Method to get video formats
    /*!
     * \return structure representing the video formats
     */
    v4l2_format* getVideoFormat();


    //! Method to set video formats
    /*!
     * \param videoFormat the attribute to change
     * \return a bool representing the success of parameters changing
     */
    bool setVideoFormat(v4l2_format* videoFormat);

private:

    //! The name of the actual video source
    char* name;

    //! The actual file descriptor of the video source
    int fileDescript;

    //! The actual video formats (contains width and height)
    v4l2_format* videoFormat;

    //! The actual videoCapability (contains ..)
    v4l2_capability* videoCapability;

    //! The actual videoPicture parameters (contains ..)
    video_picture* videoPicture;

};
#endif //VIDEODEVICE_H

