/* Generated by Together */

#include "CopyMode.h"

  CopyMode::CopyMode(){
  	baseAddr= NULL;
  }
  
  CopyMode::CopyMode(VideoDevice* device): CaptureMode(device){
  	baseAddr= NULL;
  }

  CopyMode::~CopyMode(){
  }

  bool CopyMode::init(){
  	
  	int imageSize= this->device->getVideoFormat()->fmt.pix.sizeimage;
  	baseAddr= mmap(NULL, imageSize, PROT_READ, MAP_SHARED, this->device->getFileDescript(), 0);
  	
  	if( baseAddr == NULL )
  		return false;
  		
  	return true;
  	
  }
 
  bool CopyMode::close(){
  	
  	if(munmap(baseAddr, this->device->getVideoFormat()->fmt.pix.sizeimage) > 0 )
  		return true;
  		
  	return false;
  	
  }

  char* CopyMode::capture(){
   
   	int imageSize= this->device->getVideoFormat()->fmt.pix.sizeimage;
	
	// Initiating raw_data buffer
	char* raw_data= (char*)malloc(imageSize);
	
	if( raw_data == NULL ){
		printf("Error: Unable to allocate space for raw data buffer");
		return NULL;
	}
	
	try{
		memcpy( raw_data, this->baseAddr, imageSize );
	}catch(...){
		printf("Error: Unable to get data from device with Copy Method");
		this->working= false;
		return NULL;
	}
	
	int width= this->device->getVideoFormat()->fmt.pix.width;
	int height= this->device->getVideoFormat()->fmt.pix.height;
	
	// Allocate memory for the final image
	char* img_data = (char*)malloc(width*height*3*sizeof(unsigned char));
	
	if( img_data == NULL ){
		printf("Error: Unable to allocate space for image buffer");
		return NULL;
	}
	
	// launch image format conversion
	format_conversion(this->device->getVideoFormat()->fmt.pix.pixelformat, raw_data, img_data, width, height);
    return img_data;

  }

