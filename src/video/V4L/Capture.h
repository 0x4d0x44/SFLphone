/* Generated by Together */

#ifndef CAPTURE_H
#define CAPTURE_H

#include <vector>

#include "Command.h"
#include "CaptureMode.h"
#include "CopyMode.h"
#include "ReadMode.h"


using namespace std;

//! Defines the available capture mode
enum TCaptureMode {READMODE= 0x1,
					COPYMODE= 0x2
					};

//! Capture
/*!
 * This class is used to get a capture from the video device
 */ 
class Capture : public Command {
public:

    //! Constructor
    Capture();

    //! Destructor
    ~Capture();


    //! Method to switch to the next CaptureMode in the vector
    /*!
     * \return a bool representing the success of the operation
     */
    bool nextCaptureMode();


    //! Method to force the class to use a specific CaptureMode in the vector
    /*!
     * \param captModePos the position of the CaptureMode in the vector
     * \return a bool representing the success of the operation
     */
    bool forceCaptureMode(TCaptureMode captModePos);
    
    //! Method to capture from the video source
    /*!
     * \return a pointer to the captured data
     */
    char* GetCapture();

private:

	//! Method to create and initialise the captureModes vector  
    /*!
     * Create the captureMode objects and then create the vector
     */
    void createCaptureModesVector();

    //! This method is not applicable to this class
    /*!
     * It is declared as a void methode because it's an abstract methode in the parent class
     */
    virtual bool setTo(__u16 value);

    //! This method is not applicable to this class
    /*!
     * It is declared as a void methode because it's an abstract methode in the parent class
     */
    virtual bool reset();

    //! This method is not applicable to this class
    /*!
     * It is declared as a void methode because it's an abstract methode in the parent class
     */
    virtual bool decrease(__u16 value);

    //! This method is not applicable to this class
    /*!
     * It is declared as a void methode because it's an abstract methode in the parent class
     */
    virtual bool increase(__u16 value);

    //! The position of the CaptureMode to use in the CaptrueMode vector
    vector<CaptureMode*>::iterator currentCaptureMode;

    /**
     * @supplierCardinality 1..* 
     */
    //! Vector of pointers to the CaptureModes to use
    vector<CaptureMode*> captureModesVector;
    
    //! Tells if the capture mode was forced
    bool forced;

};
#endif //CAPTURE_H

