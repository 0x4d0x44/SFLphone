/* Generated by Together */

#include "Capture.h"

  Capture::Capture(){
  	this->createCaptureModesVector();
  	this->forced= false;
  }

  Capture::~Capture(){}

  bool Capture::nextCaptureMode(){
  	
  	((CaptureMode*)(*this->currentCaptureMode))->close();
  	
  	this->currentCaptureMode++;
  	
  	if( this->currentCaptureMode == this->captureModesVector.end() )
  		this->currentCaptureMode= this->captureModesVector.begin();
  	
  	((CaptureMode*)*this->currentCaptureMode)->init();
  	
  	this->forced= false;
  		
  	return true;
  }

  bool Capture::forceCaptureMode(TCaptureMode captModePos){

	switch(captModePos){
		case READMODE:
			((CaptureMode*)*this->currentCaptureMode)->close();
			this->currentCaptureMode= this->captureModesVector.begin();
			((CaptureMode*)*this->currentCaptureMode)->init();
			this->forced= true;
			break;
		case COPYMODE:
			((CaptureMode*)*this->currentCaptureMode)->close();
			this->currentCaptureMode= this->captureModesVector.begin() + 1;
			((CaptureMode*)*this->currentCaptureMode)->init();
			this->forced= true;
			break;
	}
	
    return true;
  }

  void Capture::createCaptureModesVector(){
  	
  	CaptureMode* mode = NULL;
  	
  	// Create read-mode
  	mode= new ReadMode(Command::videoDevice);
  	captureModesVector.push_back(mode); 	
  	
  	//Create copy-mode
  	mode= new CopyMode(Command::videoDevice);
  	captureModesVector.push_back(mode);
  	
  }

 char* Capture::GetCapture(){
    
    if( !((CaptureMode*)*this->currentCaptureMode)->getWorking() )
    	return NULL;
    	
    char* tmp= ((CaptureMode*)(*this->currentCaptureMode))->capture();
    
    if( tmp == NULL && !((CaptureMode*)*this->currentCaptureMode)->getWorking() && !this->forced ){
    	this->nextCaptureMode();
    	return this->GetCapture();
    }
    	
    return tmp;
  }

  bool Capture::increase(__u16 value){

    return false;
  }
  
   bool Capture::decrease(__u16 value){

    return false;
  }

  bool Capture::setTo(__u16 value){

    return false;
  }

  bool Capture::reset(){

    return false;
  }
