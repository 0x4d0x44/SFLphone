/* Generated by Together */

#include "VideoDevice.h"

  VideoDevice::VideoDevice(char* srcName){
     
    initDevice(srcName);
    openDevice();
  
  }

  VideoDevice::~VideoDevice(){}

  void VideoDevice::initDevice(char* srcName){
    
    // initiate the name (i.e. "/dev/video0" )
    path = new char[strlen(srcName)+1];
    strcpy(path, srcName);
    
    this->name= NULL;

    // initiate videoCapability, videoFormat and videPicture attributes 
	this->videoCapability = new v4l2_capability;
	this->videoPicture = new video_picture;
	this->videoFormat = new v4l2_format;
	
  }
  
  bool VideoDevice::openDevice(){

	// open the webcam device, like a file, return a file descriptor
	this->fileDescript = open(name, O_RDONLY);
	
	if(fileDescript < 0){
		printf("error, can't open device %s\n", name);	
		return false;	
	}

	// fill the v4l2_capability struct by a ioctl call (control device)
	if(ioctl(fileDescript, VIDIOC_QUERYCAP, videoCapability)==-1){
		printf("error, can't query device's capabilities\n");
		return false;
	}


	videoFormat->type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
	if(ioctl(fileDescript, VIDIOC_G_FMT, videoFormat)==-1){
		printf("error, can't set the capture image format\n");
		return false;
	}
	videoFormat->fmt.pix.pixelformat = V4L2_PIX_FMT_YUV420;

	// return true to indicate the sucess of the operation
    return true;
  }

  bool VideoDevice::closeDevice(){

	close(this->fileDescript);
    return true;
  }
  
  v4l2_format* VideoDevice::getVideoFormat(){
    
    return this->videoFormat;
  }
  
  v4l2_capability* VideoDevice::getVideoCapability(){

    return this->videoCapability;
  }
  
  video_picture* VideoDevice::getVideoPicture(){

    return this->videoPicture;
  }
  
  void VideoDevice::setVideoFormat(v4l2_format* videoFormat){

    this->videoFormat = videoFormat;

  }

  void VideoDevice::setVideoCapability(v4l2_capability* videoCapability){

    this->videoCapability = videoCapability;

  }

  void VideoDevice::setVideoPicture(video_picture* videoPicture){

    this->videoPicture = videoPicture;

  }
  
  void VideoDevice::setBrightness(__u16 value){

    this->videoPicture->brightness = value;

  }
  
  void VideoDevice::setContrast(__u16 value){

    this->videoPicture->contrast = value;

  }
  
  void VideoDevice::setColour(__u16 value){

    this->videoPicture->colour = value;

  }
  
  char* VideoDevice::getName(){

	if( this->name == NULL ){
	  	v4l2_input* getinput=(v4l2_input *) calloc(1, sizeof(v4l2_input));
	  	memset(getinput, 0, sizeof(struct v4l2_input));
	  	getinput->index=0;
	  	ioctl(this->fileDescript,VIDIOC_ENUMINPUT , getinput);
	  	this->name= new char[ 32 ];
	  	memcpy(this->name, getinput->name, 32);
  	}
  	
    return this->name;
  }
  
  char* VideoDevice::getPath(){
  	return this->path;
  }

  int VideoDevice::getFileDescript(){

    return this->fileDescript;
  }
