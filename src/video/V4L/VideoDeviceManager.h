/* Generated by Together */

#ifndef VIDEODEVICEMANAGER_H
#define VIDEODEVICEMANAGER_H
#include "Command.h"
#include "VideoDevice.h"

//! VideoDeviceManager
/*!
 * This class manages the video device, it make the link between the device and his properties objects (brightness, luminosity...). It also creates the DeviceManger object and it can change it too. Only one instance of the manager can exist at one time
 */
class VideoDeviceManager {
public:


    //! Constructor.
    VideoDeviceManager();


    //! Destructor
    ~VideoDeviceManager();


    //! Method to get a new command (propriety)
    /*!
     * This method creates a new command (a propriety of the video device) and returns a pointer to this command 
     * 
     * \param ref the reference of the command
     * \return a pointer to the created command
     */
    Command* getCommand(char* ref);


    //! Method to get the instance of the actual VideoDevice.
    /*!
     * \return an instance of the actual VideoDevice
     */
    VideoDevice* getDevice();


    //! Method to create a new VideoDevice.
    /*!
     * \param srcName the name of the camera that the new VideoDevice will use as a source.
     * \return a pointer to the new VideoDevice (needed to change the device)
     */
    VideoDevice* createDevice(char* srcName);


    //! Method to change the VideoDevice.
    /*!
     * \param videoDev the pointer to the new VideoDevice
     * \return a bool representing the success of the VideoDevice change
     */
    bool changeDevice(VideoDevice* videoDev);


    //! Method to get the instance of the VideoDeviceManager.
    /*!
     * If it does not exist, this method will create it
     * 
     * \return an instance of the VideoDeviceManager
     */
    static VideoDeviceManager* getInstance();

private:

    /** @link dependency */
    /*# Command lnkCommand; */
    //! The instance of the VideoDeviceManager
    static VideoDeviceManager* instance;

    //! The pointer of the actual VideoDevice
    static VideoDevice* actualVideoDevice;

};
#endif //VIDEODEVICEMANAGER_H
