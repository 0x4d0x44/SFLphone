/* Generated by Together */

#ifndef MEMKEY_H
#define MEMKEY_H

//! Reprensent a unique key associated to a shared memory space
/*!
 * This class is a container for the information relative to a shared memory space
 */
class MemKey {
public:

	//! Constructor
	/*!
	 * Initiate the object
	 * 
	 * \param size the maximum size of the shared memory space
	 * \param description a description of the shared memory space
	 */
    MemKey(int size, char* description = 0);

    //! Pointer copy constructor
    /*!
     * Creates an independant copy of the source object
     * 
     * \param key a pointer to a MemKey object
     */
    MemKey(MemKey* key);
   
    //! Reference copy constructor
    /*!
     * Creates an independant copy of the source object
     * 
     * \param key a reference to a MemKey object
     */
    MemKey(MemKey& key);
    
    //! Constructor from serialized data
    /*!
     * \param serializedData a char pointer to the representation of a MemKey
     */
    MemKey(char* serializedData);

    //! Destructor
    /*!
     * Disposes cleanly of object
     */
    ~MemKey();

    //! Access method to the key of the shared memory space
    /*!
     * \return the key to the memory space
     */
    int getKey();

    //! Access method to the description of the shared memory space
    /*!
     * \return a constant char pointer to the description
     */
    const char * getDescription() const;

    //! Access method to the index of the memory space in the MemManager
    /*!
     * \return the index in the MemManager
     */
    int getIndex();

    //! Modification method to the index of the memory space in the MemManager
    /*!
     * \param index the index in the MemManager
     */
    void setIndex(int index);

    //! Access method to the maixmum size of shared memory space
    /*!
     * \return the maximum size of the shared memory space
     */
    int getSize();

    //! Method to serialize the MemKeyObject
    /*!
     * \return a char pointer reprensenting the state of the key
     */
    char * serialize();

private:
	
	//! Default constructor
	/*!
	 * The default constructor is declared private to prevent the decleratio of an MemKey without the proper information.
	 */
    MemKey();
    
    //! The key to access the shared memory space
    int key;
    
    //! The description of the shared memory space
    char * description;
    
    //! The index of the MemSpace in the MemManager
    int index;
    
    //! The maximum size of the shared memory space
    int size;
    
};
#endif //MEMKEY_H
