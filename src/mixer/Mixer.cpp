/* Generated by Together */

#include "Mixer.h"

Mixer::Mixer(Tmixer type, vector<InputStreams*> inputs, OutputStream* audioOut, OutputStream* videoOut)
{
  
  audioTranscoder=NULL;
  videoTranscoder=NULL;
  audioOutput=NULL;
  videoOutput=NULL;
  
  // Initialisation du mixer
  init(type,inputs,audioOut,videoOut);
}

Mixer::~Mixer()
{
}

void Mixer::init(Tmixer type, vector<InputStreams*> inputs, OutputStream* audioOut, OutputStream* videoOut)
{
  theType=type;
  
  switch(theType)
  {
    case NOSYNCH_AV_STRAIGHTTHROUGH:
    	this->createStraightThrough(type, inputs, audioOut, videoOut);      
        break;
    case SYNCH_AV_STRAIGHTTHROUG: //TODO:
        break;
    case NOSYNCH_AV_MIXER2: //TODO:
        break;
    case SYNCH_AV_MIXER2: //TODO:
        break;
    case NOSYNCH_AUTOSENSE: //TODO:
        break;
    case SYNCH_AUTOSENSE: //TODO:
        break;
  }
}

void Mixer::start()
{
  audioTranscoder->start();
  videoTranscoder->start();
  for(int i=0; i<synchManagers.size();i++)
  {
    synchManagers[i]->start();
  }
  
}

bool Mixer::changeCodecConfig(CodecInfo* infos)
{
	// \TODO: To implement
  return true;
}

bool Mixer::changeOverallSettings(Tmixer type, vector<InputStreams*> inputs, OutputStream* audioOut, OutputStream* videoOut)
{
	// \TODO: To implement
  return true;
}

void Mixer::terminateThreads()
{
  audioTranscoder->stop();
  videoTranscoder->stop();
  for(int i=0; i<synchManagers.size();i++)
  {
    synchManagers[i]->stop();
  }
}

void Mixer::createAutoSense(Tmixer type, vector<InputStreams*> inputs, OutputStream* audioOut, OutputStream* videoOut)
{
  	// \TODO: To implement
}

void Mixer::createStraightThrough(Tmixer type, vector<InputStreams*> inputs, OutputStream* audioOut, OutputStream* videoOut)
{
	this->streamsInput.push_back(inputs[0]);
	
	// Setting outputs
  	audioOutput=audioOut;
  	videoOutput=videoOut;
  	
	// Create 2 internal buffer, one for video and the other for audio	
	this->intBuffers.push_back( new InternalBuffer() );
	this->intBuffers.push_back( new InternalBuffer() );
	
	int index1= this->intBuffers.size() - 1;
	int index2= this->intBuffers.size() - 2;
	
	// Creation des deux Mixer StraightThrough
	// TODO: ajouter les Codec Infos
    videoTranscoder = new StraightThrough_VT(this->intBuffers[index1],videoOutput,NULL);  
    audioTranscoder = new StraightThrough_AT(this->intBuffers[index2],audioOutput);
         
    // Creation du SynchManager NoSynch
     synchManagers.push_back( new NoSynch(this->streamsInput[0] ,this->intBuffers[index1],this->intBuffers[index2]) );
 
}

void Mixer::createMixer2(Tmixer type, vector<InputStreams*> inputs, OutputStream* audioOut, OutputStream* videoOut)
{
  // \TODO: To implement
}

void Mixer::createAudio1()
{
  // \TODO: To implement
}

bool Mixer::addStream(InputStreams* input)
{
	// \TODO: To implement
  return true;
}

bool Mixer::addStream(VideoInput* input)
{
	// \TODO: To implement
  return true;
}

bool Mixer::addStream(AudioInput* input)
{
	// \TODO: To implement
  return true;
}

void Mixer::updateState()
{
  // \TODO: To implement
}

Mixer::Mixer()
{
}
