/* Generated by Together */

#include "AudioInput.h"
#include "TimeInfo.h"
#include <string.h>
#include "../tracePrintSFL.h"


void AudioInput::putData(short *data, int size, int leTemps)
{
  if (data!=NULL && size>0)
  {
  	if( this->buffer != NULL )
  		delete this->buffer;
    buffer = new short[size];
    
    if( this->infoTemps != NULL )
    	delete this->infoTemps;
    	
    infoTemps = new TimeInfo(leTemps);
    memcpy(data,buffer,size);
    sizeBuffer=size;
    ptracesfl("AudioInput - putData(): Sending signal new data",MT_INFO, AUDIOINPUT_TRACE);
    sem_post(&semaphore);
  }
  else
    ptracesfl("AudioInput - putData(): Parameter error",MT_ERROR, AUDIOINPUT_TRACE);
}

int AudioInput::fetchData(short *data) 
{ 
  if (buffer!=NULL && data!=NULL)
  {
    ptracesfl("AudioInput - fetchData(): Watting for data",MT_INFO, AUDIOINPUT_TRACE);
    sem_wait(&semaphore);
    ptracesfl("AudioInput - recieved new data",MT_INFO, AUDIOINPUT_TRACE);
    memcpy(buffer,data,sizeBuffer);
    return this->sizeBuffer;
  }
  else
  {
    if( data == NULL )
  		ptracesfl("AudioInput - fetchData(): bad paramteter",MT_ERROR, AUDIOINPUT_TRACE);
  	else
    	ptracesfl("AudioInput - fetchData(): empty buffer",MT_ERROR, AUDIOINPUT_TRACE);
  }
  
  return -1;
}

int AudioInput::getSizeBuffer()
{
	return this->sizeBuffer;
}

AudioInput::AudioInput()
{
  sem_init(&semaphore,0,0);
  buffer= NULL;
  infoTemps= NULL;
  sizeBuffer= 0;
}

AudioInput::~AudioInput()
{
	
  ptracesfl("AudioInput - ~AudioInput(): Destruction de l'objet",MT_INFO,true);
  if (buffer != NULL){
    delete buffer;
    buffer=NULL;
  }
  if (infoTemps!=NULL){
    delete infoTemps;
    infoTemps=NULL;
  }

}

void AudioInput::putTimeInfo(TimeInfo* infos)
{
  ptracesfl("AudioInput - putTimeInfo(): Demande semaphore",MT_INFO,true);
  sem_wait(&semaphore);
  ptracesfl("AudioInput - putTimeInfo(): Zone Critique",MT_INFO,true);
  infoTemps = infos;
  sem_post(&semaphore);
  ptracesfl("AudioInput - putTimeInfo(): Sortie Zone Critique",MT_INFO,true);
}

TimeInfo AudioInput::fetchTimeInfo()
{
  return *this->infoTemps;
}

