/* Generated by Together */

#ifndef MIXER_H
#define MIXER_H

#include <vector>

#include "OutputStream.h"
#include "InputStreams.h"

#include "NoSynch.h"
#include "AudioSynch.h"

#include "InternalBuffer.h"

#include "StraightThrough_AT.h"
#include "AudioMixer2Channels.h"

#include "StraightThrough_VT.h"
#include "VideoMixer2Channels.h"

using namespace std;

//! Audio and video mixer
/*!
 * This class implements a modular audio and video stream mixer that can take an arbitrairy number of InputStreams and converts them to 1 audio et 1 video OutputStreams.
 */
class Mixer {
public:

	//! Mixer type
	/*!
	 * Enumerates the possible types of mixers.
	 */
	enum Tmixer {  NOSYNCH_AV_STRAIGHTTHROUGH= 0x0, /*!No Synchronization Manager and audio-video straight Through mixer */
	               SYNCH_AV_STRAIGHTTHROUG= 0x01,   /*!Synchronization Manager and audio-video straight Through mixer */
	               NOSYNCH_AV_MIXER2= 0x02,			/*!No Synchronization Manager and audio-video 2 channels mixer */
	               SYNCH_AV_MIXER2= 0x03,			/*!Synchronization Manager and audio-video 2 channels mixer */
	               NOSYNCH_AUTOSENSE= 0x04,			/*!No Synchronization Manager and auto-detect mixer state from input */
	               SYNCH_AUTOSENSE= 0x05			/*!Synchronization Manager and auto-detect mixer stater from input */
		    };

	//! Constructor
	/*!
	 * Create a mixer from the type, inputs and ouput specified
	 * 
	 * \param type the type of the mixer
	 * \param inputs the InputStreams of the mixer
	 * \param audioOut the audio output stream see OutputStream
	 * \param videoOut the cideo output stream see OutputStream
	 */
	Mixer(Tmixer type, vector<InputStreams*> inputs, OutputStream* audioOut, OutputStream* videoOut);

	//! Destructor
	/*
	 * Stops all the running threads
	 */
	~Mixer();
	
	//! Start the mixers operation
	/*!
	 * Starts all the thread that are needed.
	 */
    void start();

    //! Method to change the codec configuration
    /*!
     * This method changes the codec information for the video mixer.
     * 
     * \param infos the codec information
     * \return the success of the change
     */
    bool changeCodecConfig(CodecInfo* infos);

    //! Method to completely change the mixers configuration.
    /*!
     * Effectively resets the mixer to change it's purpose.
     * 
     * \param type the type of mixer see Tmixer
     * \param inputs a vector of InputSteams
     * \param audioOut the audio ouput buffer
     * \param videoOut the video ouput buffer
     * \return the success of the change
     */
    bool changeOverallSettings(Tmixer type, vector<InputStreams*> inputs, OutputStream* audioOut, OutputStream* videoOut);
    
    //! Method to add an input stream
    /*!
     * Adds if possible an InputStream
     */
    bool addStream(InputStreams* input);

    //! Method to add a video input
    /*!
     * Adds the video input to the first available video buffer space in the InputStreams vector.
     */
    bool addStream(VideoInput* input);

    //! Method to add a audio input
    /*!
     * Adds the audio input to the first available audio buffer space in the InputStreams vector.
     */
    bool addStream(AudioInput* input);


private:

	//! Default constructor
	/*!
	 * Declared private to prevent the creation of an inputless or outputless mixer
	 */
    Mixer();
    
    //! Changes the current state of the mixer
    /*!
     * Changes the current state of the mixer to represent the addition of an input.
     */
    void updateState();
    
    //! Creates a straight through audio mixer
    void createAudio1();
    
    //! Creates a 2 channel audio-video mixer
    /*!
     * \param type the type of mixer see Tmixer
     * \param inputs a vector of InputSteams
     * \param audioOut the audio ouput buffer
     * \param videoOut the video ouput buffer
     */
    void createMixer2(Tmixer type, vector<InputStreams*> inputs, OutputStream* audioOut, OutputStream* videoOut);
    
    //! Creates a straight through audio-video mixer
    /*!
     * \param type the type of mixer see Tmixer
     * \param inputs a vector of InputSteams
     * \param audioOut the audio ouput buffer
     * \param videoOut the video ouput buffer
     */
    void createStraightThrough(Tmixer type, vector<InputStreams*> inputs, OutputStream* audioOut, OutputStream* videoOut);
    
    //! Creates a mixer from the information it receives.
    /*!
     * \param type the type of mixer see Tmixer
     * \param inputs a vector of InputSteams
     * \param audioOut the audio ouput buffer
     * \param videoOut the video ouput buffer
     */
    void createAutoSense(Tmixer type, vector<InputStreams*> inputs, OutputStream* audioOut, OutputStream* videoOut);
    
    //! Terminates the running threads
    void terminateThreads();
    
    //! Initializes the mixer
    /*!
     * Call the needed create method
     * 
     * \param type the type of mixer see Tmixer
     * \param inputs a vector of InputSteams
     * \param audioOut the audio ouput buffer
     * \param videoOut the video ouput buffer
     * 
     * \sa createAudio1, createMixer2, createStraightThrough, createAutoSense
     */
    void init(Tmixer type, vector<InputStreams*> inputs, OutputStream* audioOut, OutputStream* videoOut);

    //! Vector containing the synchronization managers
    vector<SynchManager*> synchManagers;
    
    //! The audio mixer in usage
    AudioMixer* audioTranscoder;
    
    //! The video mixer in usages
    VideoMixer* videoTranscoder;
    
    //! The current type of the mixer
    Tmixer theType;

    // Le vecteur contenant les flux dentre au mixer // TODO: P-e declarer localement...
    vector<InputStreams*> streamsInput;
    
    // Les deux buffer de sortie du mixer
    OutputStream* audioOutput;    // TODO: P-e declarer localement...
    OutputStream* videoOutput;    // TODO: P-e declarer localement...
    
    vector<InternalBuffer*> intBuffers;


};
#endif //MIXER_H
