/* Generated by Together */

#ifndef INTERNALBUFFER_H
#define INTERNALBUFFER_H

#include <semaphore.h>

//! Internal data sharing class
/*!
 * Acts as an Internal buffer that can be accessed from multiple source.
 */
class InternalBuffer {
public:

	//! Default constructor
	/*!
	 * Initiates the internal buffer
	 */
    InternalBuffer();

    //! Destructor
    /*!
     * Disposes cleanly of the buffer
     */
    ~InternalBuffer();

    //! Changes the data in the buffer
    /*!
     * \param data a pointer to the data to put in the buffer
     * \param size the size of the data
     * \return the success of the operation
     */
    bool putData(void * data, int size);

    //! Gets the data contained in the buffer
    /*!
     * \param data a pointer to put the data
     * \return the size of the data
     */
    bool fetchData(void * data);

    //! Intializes the buffer
    void Init();

    // Retourne la grtandeur du buffer;
    int getSizeBuffer();

private:
	
	//! Internal buffer
    void * buffer;
    
    //! Size of the current buffer
    int sizeBuffer;
    
    //! Semaphore to protect from multiple simultaneous access
    sem_t semaphore;
    
};
#endif //INTERNALBUFFER_H
