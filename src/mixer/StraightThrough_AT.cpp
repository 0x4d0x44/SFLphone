/* Generated by Together */

#include "StraightThrough_AT.h"
#include "../tracePrintSFL.h"

void StraightThrough_AT::run()
{
  OkToKill=false;
  while(Active)
  {
    sizeBuffer = inputBuffer->getSizeBuffer();
    if( sizeBuffer != 0){
	    data = (void*) malloc(sizeBuffer);
	    inputBuffer->fetchData(data);
	    outputBuffer->putData((short*)data,sizeBuffer);
	    free(data);
    }
    usleep(10);
  }
  ptracesfl("StraightThrough_AT - run(): Le thread travail plus :(",MT_INFO,true);
  OkToKill=true;
}

void StraightThrough_AT::pause()
{ 
  ptracesfl("StraightThrough_AT - pause(): Demande de pause recu...",MT_INFO,true);
  Active=false;
}

void StraightThrough_AT::restart()
{
  ptracesfl("StraightThrough_AT - restart(): Demande de restart recu...",MT_INFO,true);
  Active=true;
  run();
}

void StraightThrough_AT::stop()
{ 
  ptracesfl("StraightThrough_AT - stop(): Demande de stop recu...",MT_INFO,true);
  Active=false;
  OkToKill=false;
  while(!OkToKill);
  terminate();
}

StraightThrough_AT::StraightThrough_AT(InternalBuffer* input, OutputStream* output)
{
  ptracesfl("StraightThrough_AT - StraightThrough_AT(): Creation de l'objet",MT_INFO,true);
  inputBuffer = input;
  outputBuffer = output;
  Active=true;
  OkToKill=true;
}

StraightThrough_AT::~StraightThrough_AT()
{
  ptracesfl("StraightThrough_AT - ~StraightThrough_AT(): Destruction de l'objet",MT_INFO,true);
  free(data); // Verifier Null ?
}

// DEPRECATED!!!!!!!
StraightThrough_AT::StraightThrough_AT()
{
}

