/* Generated by Together */

#include "VideoInput.h"
#include "TimeInfo.h"
#include <string.h>
#include "../tracePrintSFL.h"

VideoInput::VideoInput(){
	
  sem_init(&sem_fetchData,0,0);
  sem_init(&sem_putData,0,1);
  buffer= NULL;
  infoTemps= NULL;
  sizeBuffer=0;
  width= 0;
  height= 0;
  
}

VideoInput::~VideoInput(){
	
  if (buffer!=NULL){
    delete buffer;
    buffer=NULL;
  }
  if (infoTemps!=NULL){
    delete infoTemps;
    infoTemps=NULL;
  }
  
}

void VideoInput::putData(char * data, int size, int leTemps, int w, int h){
	 
  if (data!=NULL && size>0 && w!= 0 && h!=0)
  {
  	ptracesfl("VideoInput - putData(): Watting for data to be fetched",MT_INFO, VIDEOINPUT_TRACE);
  	sem_wait(&sem_putData);

    if( buffer != NULL )
    	delete buffer;
    buffer = new char[size];
    
    if( infoTemps != NULL )
    	delete infoTemps;
    infoTemps = new TimeInfo(leTemps);
    
    memcpy(buffer, data,size);
    
    sizeBuffer=size;
    width= w;
    height= h;
    
    ptracesfl("VideoInput - putData(): Sending signal new data",MT_INFO, VIDEOINPUT_TRACE);
    sem_post(&sem_fetchData);
  }
  else
    ptracesfl("VideoInput - putData(): Parameter error",MT_ERROR, VIDEOINPUT_TRACE);
}

int VideoInput::fetchData(unsigned char* data, int &w, int &h){
	 
  if (buffer!=NULL && data!=NULL)
  {
    
    ptracesfl("VideoInput - fetchData(): Watting for data",MT_INFO, VIDEOINPUT_TRACE);
    sem_wait(&sem_fetchData);
    ptracesfl("VideoInput - recieved new data",MT_INFO, VIDEOINPUT_TRACE);
    memcpy(data, buffer,sizeBuffer);
    
    w= this->width;
    w= this->height;
    
    sem_post(&sem_putData);
    ptracesfl("VideoInput - fetchData(): Data to be fetched",MT_INFO, VIDEOINPUT_TRACE);
    return this->sizeBuffer;
  }
  else
  {
    if( data == NULL )
  		ptracesfl("VideoInput - fetchData(): bad paramteter",MT_ERROR, VIDEOINPUT_TRACE);
  	else
    	ptracesfl("VideoInput - fetchData(): empty buffer",MT_ERROR, VIDEOINPUT_TRACE);
  }
  
  return -1;
  
}

int VideoInput::getSizeBuffer(){
 	return this->sizeBuffer;
}

TimeInfo VideoInput::fetchTimeInfo(){ 
	return *this->infoTemps;
}
