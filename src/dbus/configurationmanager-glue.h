
/*
 *	This file was automatically generated by dbusxx-xml2cpp; DO NOT EDIT!
 */

#ifndef __dbusxx__configurationmanager_glue_h__ADAPTOR_MARSHAL_H
#define __dbusxx__configurationmanager_glue_h__ADAPTOR_MARSHAL_H

#include <dbus-c++/dbus.h>

namespace org {
namespace sflphone {
namespace SFLphone {

class ConfigurationManager
: public ::DBus::InterfaceAdaptor
{
public:

    ConfigurationManager()
    : ::DBus::InterfaceAdaptor("org.sflphone.SFLphone.ConfigurationManager")
    {
        register_method(ConfigurationManager, getAccountDetails, _getAccountDetails_stub);
        register_method(ConfigurationManager, setAccountDetails, _setAccountDetails_stub);
        register_method(ConfigurationManager, addAccount, _addAccount_stub);
        register_method(ConfigurationManager, removeAccount, _removeAccount_stub);
        register_method(ConfigurationManager, getAccountList, _getAccountList_stub);
        register_method(ConfigurationManager, getDefaultAccount, _getDefaultAccount_stub);
        register_method(ConfigurationManager, setDefaultAccount, _setDefaultAccount_stub);
        register_method(ConfigurationManager, sendRegister, _sendRegister_stub);
        register_method(ConfigurationManager, getToneLocaleList, _getToneLocaleList_stub);
        register_method(ConfigurationManager, getVersion, _getVersion_stub);
        register_method(ConfigurationManager, getRingtoneList, _getRingtoneList_stub);
        register_method(ConfigurationManager, getPlaybackDeviceList, _getPlaybackDeviceList_stub);
        register_method(ConfigurationManager, getRecordDeviceList, _getRecordDeviceList_stub);
        register_method(ConfigurationManager, isRingtoneEnabled, _isRingtoneEnabled_stub);
        register_method(ConfigurationManager, ringtoneEnabled, _ringtoneEnabled_stub);
        register_method(ConfigurationManager, getRingtoneChoice, _getRingtoneChoice_stub);
        register_method(ConfigurationManager, setRingtoneChoice, _setRingtoneChoice_stub);
        register_method(ConfigurationManager, getCodecList, _getCodecList_stub);
        register_method(ConfigurationManager, getCodecDetails, _getCodecDetails_stub);
        register_method(ConfigurationManager, getActiveCodecList, _getActiveCodecList_stub);
        register_method(ConfigurationManager, setActiveCodecList, _setActiveCodecList_stub);
        register_method(ConfigurationManager, getInputAudioPluginList, _getInputAudioPluginList_stub);
        register_method(ConfigurationManager, getOutputAudioPluginList, _getOutputAudioPluginList_stub);
        register_method(ConfigurationManager, setInputAudioPlugin, _setInputAudioPlugin_stub);
        register_method(ConfigurationManager, setOutputAudioPlugin, _setOutputAudioPlugin_stub);
        register_method(ConfigurationManager, getAudioOutputDeviceList, _getAudioOutputDeviceList_stub);
        register_method(ConfigurationManager, setAudioOutputDevice, _setAudioOutputDevice_stub);
        register_method(ConfigurationManager, getAudioInputDeviceList, _getAudioInputDeviceList_stub);
        register_method(ConfigurationManager, setAudioInputDevice, _setAudioInputDevice_stub);
        register_method(ConfigurationManager, getCurrentAudioDevicesIndex, _getCurrentAudioDevicesIndex_stub);
        register_method(ConfigurationManager, getAudioDeviceIndex, _getAudioDeviceIndex_stub);
        register_method(ConfigurationManager, getCurrentAudioOutputPlugin, _getCurrentAudioOutputPlugin_stub);
        register_method(ConfigurationManager, isIax2Enabled, _isIax2Enabled_stub);
        register_method(ConfigurationManager, getDialpad, _getDialpad_stub);
        register_method(ConfigurationManager, setDialpad, _setDialpad_stub);
        register_method(ConfigurationManager, startHidden, _startHidden_stub);
        register_method(ConfigurationManager, isStartHidden, _isStartHidden_stub);
        register_method(ConfigurationManager, popupMode, _popupMode_stub);
        register_method(ConfigurationManager, switchPopupMode, _switchPopupMode_stub);
    }

    ::DBus::IntrospectedInterface* const introspect() const 
    {
        static ::DBus::IntrospectedArgument getAccountDetails_args[] = 
        {
            { "accountID", "s", true },
            { "details", "a{ss}", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument setAccountDetails_args[] = 
        {
            { "accountID", "s", true },
            { "details", "a{ss}", true },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument addAccount_args[] = 
        {
            { "details", "a{ss}", true },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument removeAccount_args[] = 
        {
            { "accoundID", "s", true },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument getAccountList_args[] = 
        {
            { "list", "as", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument getDefaultAccount_args[] = 
        {
            { "accountID", "s", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument setDefaultAccount_args[] = 
        {
            { "accountID", "s", true },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument sendRegister_args[] = 
        {
            { "accountID", "s", true },
            { "expire", "i", true },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument getToneLocaleList_args[] = 
        {
            { "list", "as", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument getVersion_args[] = 
        {
            { "version", "s", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument getRingtoneList_args[] = 
        {
            { "list", "as", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument getPlaybackDeviceList_args[] = 
        {
            { "list", "as", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument getRecordDeviceList_args[] = 
        {
            { "list", "as", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument isRingtoneEnabled_args[] = 
        {
            { "bool", "i", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument ringtoneEnabled_args[] = 
        {
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument getRingtoneChoice_args[] = 
        {
            { "tone", "s", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument setRingtoneChoice_args[] = 
        {
            { "tone", "s", true },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument getCodecList_args[] = 
        {
            { "list", "as", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument getCodecDetails_args[] = 
        {
            { "payload", "i", true },
            { "details", "as", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument getActiveCodecList_args[] = 
        {
            { "list", "as", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument setActiveCodecList_args[] = 
        {
            { "list", "as", true },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument getInputAudioPluginList_args[] = 
        {
            { "list", "as", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument getOutputAudioPluginList_args[] = 
        {
            { "list", "as", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument setInputAudioPlugin_args[] = 
        {
            { "audioPlugin", "s", true },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument setOutputAudioPlugin_args[] = 
        {
            { "audioPlugin", "s", true },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument getAudioOutputDeviceList_args[] = 
        {
            { "list", "as", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument setAudioOutputDevice_args[] = 
        {
            { "index", "i", true },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument getAudioInputDeviceList_args[] = 
        {
            { "list", "as", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument setAudioInputDevice_args[] = 
        {
            { "index", "i", true },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument getCurrentAudioDevicesIndex_args[] = 
        {
            { "list", "as", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument getAudioDeviceIndex_args[] = 
        {
            { "name", "s", true },
            { "index", "i", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument getCurrentAudioOutputPlugin_args[] = 
        {
            { "plugin", "s", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument isIax2Enabled_args[] = 
        {
            { "res", "i", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument getDialpad_args[] = 
        {
            { "state", "i", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument setDialpad_args[] = 
        {
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument startHidden_args[] = 
        {
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument isStartHidden_args[] = 
        {
            { "state", "i", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument popupMode_args[] = 
        {
            { "state", "i", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument switchPopupMode_args[] = 
        {
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument parametersChanged_args[] = 
        {
            { "list", "a{ss}", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument accountsChanged_args[] = 
        {
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument errorAlert_args[] = 
        {
            { "code", "i", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedMethod ConfigurationManager_methods[] = 
        {
            { "getAccountDetails", getAccountDetails_args },
            { "setAccountDetails", setAccountDetails_args },
            { "addAccount", addAccount_args },
            { "removeAccount", removeAccount_args },
            { "getAccountList", getAccountList_args },
            { "getDefaultAccount", getDefaultAccount_args },
            { "setDefaultAccount", setDefaultAccount_args },
            { "sendRegister", sendRegister_args },
            { "getToneLocaleList", getToneLocaleList_args },
            { "getVersion", getVersion_args },
            { "getRingtoneList", getRingtoneList_args },
            { "getPlaybackDeviceList", getPlaybackDeviceList_args },
            { "getRecordDeviceList", getRecordDeviceList_args },
            { "isRingtoneEnabled", isRingtoneEnabled_args },
            { "ringtoneEnabled", ringtoneEnabled_args },
            { "getRingtoneChoice", getRingtoneChoice_args },
            { "setRingtoneChoice", setRingtoneChoice_args },
            { "getCodecList", getCodecList_args },
            { "getCodecDetails", getCodecDetails_args },
            { "getActiveCodecList", getActiveCodecList_args },
            { "setActiveCodecList", setActiveCodecList_args },
            { "getInputAudioPluginList", getInputAudioPluginList_args },
            { "getOutputAudioPluginList", getOutputAudioPluginList_args },
            { "setInputAudioPlugin", setInputAudioPlugin_args },
            { "setOutputAudioPlugin", setOutputAudioPlugin_args },
            { "getAudioOutputDeviceList", getAudioOutputDeviceList_args },
            { "setAudioOutputDevice", setAudioOutputDevice_args },
            { "getAudioInputDeviceList", getAudioInputDeviceList_args },
            { "setAudioInputDevice", setAudioInputDevice_args },
            { "getCurrentAudioDevicesIndex", getCurrentAudioDevicesIndex_args },
            { "getAudioDeviceIndex", getAudioDeviceIndex_args },
            { "getCurrentAudioOutputPlugin", getCurrentAudioOutputPlugin_args },
            { "isIax2Enabled", isIax2Enabled_args },
            { "getDialpad", getDialpad_args },
            { "setDialpad", setDialpad_args },
            { "startHidden", startHidden_args },
            { "isStartHidden", isStartHidden_args },
            { "popupMode", popupMode_args },
            { "switchPopupMode", switchPopupMode_args },
            { 0, 0 }
        };
        static ::DBus::IntrospectedMethod ConfigurationManager_signals[] = 
        {
            { "parametersChanged", parametersChanged_args },
            { "accountsChanged", accountsChanged_args },
            { "errorAlert", errorAlert_args },
            { 0, 0 }
        };
        static ::DBus::IntrospectedProperty ConfigurationManager_properties[] = 
        {
            { 0, 0, 0, 0 }
        };
        static ::DBus::IntrospectedInterface ConfigurationManager_interface = 
        {
            "org.sflphone.SFLphone.ConfigurationManager",
            ConfigurationManager_methods,
            ConfigurationManager_signals,
            ConfigurationManager_properties
        };
        return &ConfigurationManager_interface;
    }

public:

    /* properties exposed by this interface, use
     * property() and property(value) to get and set a particular property
     */

public:

    /* methods exported by this interface,
     * you will have to implement them in your ObjectAdaptor
     */
    virtual std::map< ::DBus::String, ::DBus::String > getAccountDetails( const ::DBus::String& accountID ) = 0;
    virtual void setAccountDetails( const ::DBus::String& accountID, const std::map< ::DBus::String, ::DBus::String >& details ) = 0;
    virtual void addAccount( const std::map< ::DBus::String, ::DBus::String >& details ) = 0;
    virtual void removeAccount( const ::DBus::String& accoundID ) = 0;
    virtual std::vector< ::DBus::String > getAccountList(  ) = 0;
    virtual ::DBus::String getDefaultAccount(  ) = 0;
    virtual void setDefaultAccount( const ::DBus::String& accountID ) = 0;
    virtual void sendRegister( const ::DBus::String& accountID, const ::DBus::Int32& expire ) = 0;
    virtual std::vector< ::DBus::String > getToneLocaleList(  ) = 0;
    virtual ::DBus::String getVersion(  ) = 0;
    virtual std::vector< ::DBus::String > getRingtoneList(  ) = 0;
    virtual std::vector< ::DBus::String > getPlaybackDeviceList(  ) = 0;
    virtual std::vector< ::DBus::String > getRecordDeviceList(  ) = 0;
    virtual ::DBus::Int32 isRingtoneEnabled(  ) = 0;
    virtual void ringtoneEnabled(  ) = 0;
    virtual ::DBus::String getRingtoneChoice(  ) = 0;
    virtual void setRingtoneChoice( const ::DBus::String& tone ) = 0;
    virtual std::vector< ::DBus::String > getCodecList(  ) = 0;
    virtual std::vector< ::DBus::String > getCodecDetails( const ::DBus::Int32& payload ) = 0;
    virtual std::vector< ::DBus::String > getActiveCodecList(  ) = 0;
    virtual void setActiveCodecList( const std::vector< ::DBus::String >& list ) = 0;
    virtual std::vector< ::DBus::String > getInputAudioPluginList(  ) = 0;
    virtual std::vector< ::DBus::String > getOutputAudioPluginList(  ) = 0;
    virtual void setInputAudioPlugin( const ::DBus::String& audioPlugin ) = 0;
    virtual void setOutputAudioPlugin( const ::DBus::String& audioPlugin ) = 0;
    virtual std::vector< ::DBus::String > getAudioOutputDeviceList(  ) = 0;
    virtual void setAudioOutputDevice( const ::DBus::Int32& index ) = 0;
    virtual std::vector< ::DBus::String > getAudioInputDeviceList(  ) = 0;
    virtual void setAudioInputDevice( const ::DBus::Int32& index ) = 0;
    virtual std::vector< ::DBus::String > getCurrentAudioDevicesIndex(  ) = 0;
    virtual ::DBus::Int32 getAudioDeviceIndex( const ::DBus::String& name ) = 0;
    virtual ::DBus::String getCurrentAudioOutputPlugin(  ) = 0;
    virtual ::DBus::Int32 isIax2Enabled(  ) = 0;
    virtual ::DBus::Int32 getDialpad(  ) = 0;
    virtual void setDialpad(  ) = 0;
    virtual void startHidden(  ) = 0;
    virtual ::DBus::Int32 isStartHidden(  ) = 0;
    virtual ::DBus::Int32 popupMode(  ) = 0;
    virtual void switchPopupMode(  ) = 0;

public:

    /* signal emitters for this interface
     */
    void parametersChanged( const std::map< ::DBus::String, ::DBus::String >& arg1 )
    {
        ::DBus::SignalMessage sig("parametersChanged");
        ::DBus::MessageIter wi = sig.writer();
        wi << arg1;
        emit_signal(sig);
    }
    void accountsChanged(  )
    {
        ::DBus::SignalMessage sig("accountsChanged");
        emit_signal(sig);
    }
    void errorAlert( const ::DBus::Int32& arg1 )
    {
        ::DBus::SignalMessage sig("errorAlert");
        ::DBus::MessageIter wi = sig.writer();
        wi << arg1;
        emit_signal(sig);
    }

private:

    /* unmarshalers (to unpack the DBus message before calling the actual interface method)
     */
    ::DBus::Message _getAccountDetails_stub( const ::DBus::CallMessage& call )
    {
        ::DBus::MessageIter ri = call.reader();

        ::DBus::String argin1; ri >> argin1;
        std::map< ::DBus::String, ::DBus::String > argout1 = getAccountDetails(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _setAccountDetails_stub( const ::DBus::CallMessage& call )
    {
        ::DBus::MessageIter ri = call.reader();

        ::DBus::String argin1; ri >> argin1;
        std::map< ::DBus::String, ::DBus::String > argin2; ri >> argin2;
        setAccountDetails(argin1, argin2);
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
    ::DBus::Message _addAccount_stub( const ::DBus::CallMessage& call )
    {
        ::DBus::MessageIter ri = call.reader();

        std::map< ::DBus::String, ::DBus::String > argin1; ri >> argin1;
        addAccount(argin1);
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
    ::DBus::Message _removeAccount_stub( const ::DBus::CallMessage& call )
    {
        ::DBus::MessageIter ri = call.reader();

        ::DBus::String argin1; ri >> argin1;
        removeAccount(argin1);
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
    ::DBus::Message _getAccountList_stub( const ::DBus::CallMessage& call )
    {
        ::DBus::MessageIter ri = call.reader();

        std::vector< ::DBus::String > argout1 = getAccountList();
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _getDefaultAccount_stub( const ::DBus::CallMessage& call )
    {
        ::DBus::MessageIter ri = call.reader();

        ::DBus::String argout1 = getDefaultAccount();
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _setDefaultAccount_stub( const ::DBus::CallMessage& call )
    {
        ::DBus::MessageIter ri = call.reader();

        ::DBus::String argin1; ri >> argin1;
        setDefaultAccount(argin1);
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
    ::DBus::Message _sendRegister_stub( const ::DBus::CallMessage& call )
    {
        ::DBus::MessageIter ri = call.reader();

        ::DBus::String argin1; ri >> argin1;
        ::DBus::Int32 argin2; ri >> argin2;
        sendRegister(argin1, argin2);
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
    ::DBus::Message _getToneLocaleList_stub( const ::DBus::CallMessage& call )
    {
        ::DBus::MessageIter ri = call.reader();

        std::vector< ::DBus::String > argout1 = getToneLocaleList();
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _getVersion_stub( const ::DBus::CallMessage& call )
    {
        ::DBus::MessageIter ri = call.reader();

        ::DBus::String argout1 = getVersion();
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _getRingtoneList_stub( const ::DBus::CallMessage& call )
    {
        ::DBus::MessageIter ri = call.reader();

        std::vector< ::DBus::String > argout1 = getRingtoneList();
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _getPlaybackDeviceList_stub( const ::DBus::CallMessage& call )
    {
        ::DBus::MessageIter ri = call.reader();

        std::vector< ::DBus::String > argout1 = getPlaybackDeviceList();
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _getRecordDeviceList_stub( const ::DBus::CallMessage& call )
    {
        ::DBus::MessageIter ri = call.reader();

        std::vector< ::DBus::String > argout1 = getRecordDeviceList();
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _isRingtoneEnabled_stub( const ::DBus::CallMessage& call )
    {
        ::DBus::MessageIter ri = call.reader();

        ::DBus::Int32 argout1 = isRingtoneEnabled();
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _ringtoneEnabled_stub( const ::DBus::CallMessage& call )
    {
        ::DBus::MessageIter ri = call.reader();

        ringtoneEnabled();
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
    ::DBus::Message _getRingtoneChoice_stub( const ::DBus::CallMessage& call )
    {
        ::DBus::MessageIter ri = call.reader();

        ::DBus::String argout1 = getRingtoneChoice();
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _setRingtoneChoice_stub( const ::DBus::CallMessage& call )
    {
        ::DBus::MessageIter ri = call.reader();

        ::DBus::String argin1; ri >> argin1;
        setRingtoneChoice(argin1);
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
    ::DBus::Message _getCodecList_stub( const ::DBus::CallMessage& call )
    {
        ::DBus::MessageIter ri = call.reader();

        std::vector< ::DBus::String > argout1 = getCodecList();
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _getCodecDetails_stub( const ::DBus::CallMessage& call )
    {
        ::DBus::MessageIter ri = call.reader();

        ::DBus::Int32 argin1; ri >> argin1;
        std::vector< ::DBus::String > argout1 = getCodecDetails(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _getActiveCodecList_stub( const ::DBus::CallMessage& call )
    {
        ::DBus::MessageIter ri = call.reader();

        std::vector< ::DBus::String > argout1 = getActiveCodecList();
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _setActiveCodecList_stub( const ::DBus::CallMessage& call )
    {
        ::DBus::MessageIter ri = call.reader();

        std::vector< ::DBus::String > argin1; ri >> argin1;
        setActiveCodecList(argin1);
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
    ::DBus::Message _getInputAudioPluginList_stub( const ::DBus::CallMessage& call )
    {
        ::DBus::MessageIter ri = call.reader();

        std::vector< ::DBus::String > argout1 = getInputAudioPluginList();
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _getOutputAudioPluginList_stub( const ::DBus::CallMessage& call )
    {
        ::DBus::MessageIter ri = call.reader();

        std::vector< ::DBus::String > argout1 = getOutputAudioPluginList();
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _setInputAudioPlugin_stub( const ::DBus::CallMessage& call )
    {
        ::DBus::MessageIter ri = call.reader();

        ::DBus::String argin1; ri >> argin1;
        setInputAudioPlugin(argin1);
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
    ::DBus::Message _setOutputAudioPlugin_stub( const ::DBus::CallMessage& call )
    {
        ::DBus::MessageIter ri = call.reader();

        ::DBus::String argin1; ri >> argin1;
        setOutputAudioPlugin(argin1);
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
    ::DBus::Message _getAudioOutputDeviceList_stub( const ::DBus::CallMessage& call )
    {
        ::DBus::MessageIter ri = call.reader();

        std::vector< ::DBus::String > argout1 = getAudioOutputDeviceList();
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _setAudioOutputDevice_stub( const ::DBus::CallMessage& call )
    {
        ::DBus::MessageIter ri = call.reader();

        ::DBus::Int32 argin1; ri >> argin1;
        setAudioOutputDevice(argin1);
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
    ::DBus::Message _getAudioInputDeviceList_stub( const ::DBus::CallMessage& call )
    {
        ::DBus::MessageIter ri = call.reader();

        std::vector< ::DBus::String > argout1 = getAudioInputDeviceList();
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _setAudioInputDevice_stub( const ::DBus::CallMessage& call )
    {
        ::DBus::MessageIter ri = call.reader();

        ::DBus::Int32 argin1; ri >> argin1;
        setAudioInputDevice(argin1);
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
    ::DBus::Message _getCurrentAudioDevicesIndex_stub( const ::DBus::CallMessage& call )
    {
        ::DBus::MessageIter ri = call.reader();

        std::vector< ::DBus::String > argout1 = getCurrentAudioDevicesIndex();
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _getAudioDeviceIndex_stub( const ::DBus::CallMessage& call )
    {
        ::DBus::MessageIter ri = call.reader();

        ::DBus::String argin1; ri >> argin1;
        ::DBus::Int32 argout1 = getAudioDeviceIndex(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _getCurrentAudioOutputPlugin_stub( const ::DBus::CallMessage& call )
    {
        ::DBus::MessageIter ri = call.reader();

        ::DBus::String argout1 = getCurrentAudioOutputPlugin();
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _isIax2Enabled_stub( const ::DBus::CallMessage& call )
    {
        ::DBus::MessageIter ri = call.reader();

        ::DBus::Int32 argout1 = isIax2Enabled();
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _getDialpad_stub( const ::DBus::CallMessage& call )
    {
        ::DBus::MessageIter ri = call.reader();

        ::DBus::Int32 argout1 = getDialpad();
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _setDialpad_stub( const ::DBus::CallMessage& call )
    {
        ::DBus::MessageIter ri = call.reader();

        setDialpad();
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
    ::DBus::Message _startHidden_stub( const ::DBus::CallMessage& call )
    {
        ::DBus::MessageIter ri = call.reader();

        startHidden();
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
    ::DBus::Message _isStartHidden_stub( const ::DBus::CallMessage& call )
    {
        ::DBus::MessageIter ri = call.reader();

        ::DBus::Int32 argout1 = isStartHidden();
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _popupMode_stub( const ::DBus::CallMessage& call )
    {
        ::DBus::MessageIter ri = call.reader();

        ::DBus::Int32 argout1 = popupMode();
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _switchPopupMode_stub( const ::DBus::CallMessage& call )
    {
        ::DBus::MessageIter ri = call.reader();

        switchPopupMode();
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
};

} } } 
#endif//__dbusxx__configurationmanager_glue_h__ADAPTOR_MARSHAL_H
