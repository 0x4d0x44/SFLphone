
/*
 *	This file was automatically generated by dbusxx-xml2cpp; DO NOT EDIT!
 */

#ifndef __dbusxx__configurationmanager_glue_h__ADAPTOR_MARSHAL_H
#define __dbusxx__configurationmanager_glue_h__ADAPTOR_MARSHAL_H

#include <dbus-c++/dbus.h>

namespace org {
namespace sflphone {
namespace SFLphone {

class ConfigurationManager
: public ::DBus::InterfaceAdaptor
{
public:

    ConfigurationManager()
    : ::DBus::InterfaceAdaptor("org.sflphone.SFLphone.ConfigurationManager")
    {
        register_method(ConfigurationManager, getAccountDetails, _getAccountDetails_stub);
        register_method(ConfigurationManager, setAccountDetails, _setAccountDetails_stub);
        register_method(ConfigurationManager, addAccount, _addAccount_stub);
        register_method(ConfigurationManager, removeAccount, _removeAccount_stub);
        register_method(ConfigurationManager, getAccountList, _getAccountList_stub);
        register_method(ConfigurationManager, getVersion, _getVersion_stub);
        register_method(ConfigurationManager, getRingtoneList, _getRingtoneList_stub);
        register_method(ConfigurationManager, getCodecList, _getCodecList_stub);
        register_method(ConfigurationManager, getToneLocaleList, _getToneLocaleList_stub);
        register_method(ConfigurationManager, setCodecPreferedOrder, _setCodecPreferedOrder_stub);
        register_method(ConfigurationManager, getCodecPreferedOrder, _getCodecPreferedOrder_stub);
        register_method(ConfigurationManager, getPlaybackDeviceList, _getPlaybackDeviceList_stub);
        register_method(ConfigurationManager, getRecordDeviceList, _getRecordDeviceList_stub);
        register_method(ConfigurationManager, getSampleRateList, _getSampleRateList_stub);
        register_method(ConfigurationManager, getDefaultAccount, _getDefaultAccount_stub);
        register_method(ConfigurationManager, setDefaultAccount, _setDefaultAccount_stub);
    }

    ::DBus::IntrospectedInterface* const introspect() const 
    {
        static ::DBus::IntrospectedArgument getAccountDetails_args[] = 
        {
            { "accountID", "s", true },
            { "details", "a{ss}", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument setAccountDetails_args[] = 
        {
            { "accountID", "s", true },
            { "details", "a{ss}", true },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument addAccount_args[] = 
        {
            { "details", "a{ss}", true },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument removeAccount_args[] = 
        {
            { "accoundID", "s", true },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument getAccountList_args[] = 
        {
            { "list", "as", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument getVersion_args[] = 
        {
            { "version", "s", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument getRingtoneList_args[] = 
        {
            { "list", "as", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument getCodecList_args[] = 
        {
            { "list", "as", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument getToneLocaleList_args[] = 
        {
            { "list", "as", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument setCodecPreferedOrder_args[] = 
        {
            { "ringtone", "as", true },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument getCodecPreferedOrder_args[] = 
        {
            { "ringtone", "as", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument getPlaybackDeviceList_args[] = 
        {
            { "list", "as", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument getRecordDeviceList_args[] = 
        {
            { "list", "as", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument getSampleRateList_args[] = 
        {
            { "list", "as", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument getDefaultAccount_args[] = 
        {
            { "parameters", "a{ss}", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument setDefaultAccount_args[] = 
        {
            { "accountID", "s", true },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument parametersChanged_args[] = 
        {
            { "list", "a{ss}", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument accountsChanged_args[] = 
        {
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedMethod ConfigurationManager_methods[] = 
        {
            { "getAccountDetails", getAccountDetails_args },
            { "setAccountDetails", setAccountDetails_args },
            { "addAccount", addAccount_args },
            { "removeAccount", removeAccount_args },
            { "getAccountList", getAccountList_args },
            { "getVersion", getVersion_args },
            { "getRingtoneList", getRingtoneList_args },
            { "getCodecList", getCodecList_args },
            { "getToneLocaleList", getToneLocaleList_args },
            { "setCodecPreferedOrder", setCodecPreferedOrder_args },
            { "getCodecPreferedOrder", getCodecPreferedOrder_args },
            { "getPlaybackDeviceList", getPlaybackDeviceList_args },
            { "getRecordDeviceList", getRecordDeviceList_args },
            { "getSampleRateList", getSampleRateList_args },
            { "getDefaultAccount", getDefaultAccount_args },
            { "setDefaultAccount", setDefaultAccount_args },
            { 0, 0 }
        };
        static ::DBus::IntrospectedMethod ConfigurationManager_signals[] = 
        {
            { "parametersChanged", parametersChanged_args },
            { "accountsChanged", accountsChanged_args },
            { 0, 0 }
        };
        static ::DBus::IntrospectedProperty ConfigurationManager_properties[] = 
        {
            { 0, 0, 0, 0 }
        };
        static ::DBus::IntrospectedInterface ConfigurationManager_interface = 
        {
            "org.sflphone.SFLphone.ConfigurationManager",
            ConfigurationManager_methods,
            ConfigurationManager_signals,
            ConfigurationManager_properties
        };
        return &ConfigurationManager_interface;
    }

public:

    /* properties exposed by this interface, use
     * property() and property(value) to get and set a particular property
     */

public:

    /* methods exported by this interface,
     * you will have to implement them in your ObjectAdaptor
     */
    virtual std::map< ::DBus::String, ::DBus::String > getAccountDetails( const ::DBus::String& accountID ) = 0;
    virtual void setAccountDetails( const ::DBus::String& accountID, const std::map< ::DBus::String, ::DBus::String >& details ) = 0;
    virtual void addAccount( const std::map< ::DBus::String, ::DBus::String >& details ) = 0;
    virtual void removeAccount( const ::DBus::String& accoundID ) = 0;
    virtual std::vector< ::DBus::String > getAccountList(  ) = 0;
    virtual ::DBus::String getVersion(  ) = 0;
    virtual std::vector< ::DBus::String > getRingtoneList(  ) = 0;
    virtual std::vector< ::DBus::String > getCodecList(  ) = 0;
    virtual std::vector< ::DBus::String > getToneLocaleList(  ) = 0;
    virtual void setCodecPreferedOrder( const std::vector< ::DBus::String >& ringtone ) = 0;
    virtual std::vector< ::DBus::String > getCodecPreferedOrder(  ) = 0;
    virtual std::vector< ::DBus::String > getPlaybackDeviceList(  ) = 0;
    virtual std::vector< ::DBus::String > getRecordDeviceList(  ) = 0;
    virtual std::vector< ::DBus::String > getSampleRateList(  ) = 0;
    virtual std::map< ::DBus::String, ::DBus::String > getDefaultAccount(  ) = 0;
    virtual void setDefaultAccount( const ::DBus::String& accountID ) = 0;

public:

    /* signal emitters for this interface
     */
    void parametersChanged( const std::map< ::DBus::String, ::DBus::String >& arg1 )
    {
        ::DBus::SignalMessage sig("parametersChanged");
        ::DBus::MessageIter wi = sig.writer();
        wi << arg1;
        emit_signal(sig);
    }
    void accountsChanged(  )
    {
        ::DBus::SignalMessage sig("accountsChanged");
        emit_signal(sig);
    }

private:

    /* unmarshalers (to unpack the DBus message before calling the actual interface method)
     */
    ::DBus::Message _getAccountDetails_stub( const ::DBus::CallMessage& call )
    {
        ::DBus::MessageIter ri = call.reader();

        ::DBus::String argin1; ri >> argin1;
        std::map< ::DBus::String, ::DBus::String > argout1 = getAccountDetails(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _setAccountDetails_stub( const ::DBus::CallMessage& call )
    {
        ::DBus::MessageIter ri = call.reader();

        ::DBus::String argin1; ri >> argin1;
        std::map< ::DBus::String, ::DBus::String > argin2; ri >> argin2;
        setAccountDetails(argin1, argin2);
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
    ::DBus::Message _addAccount_stub( const ::DBus::CallMessage& call )
    {
        ::DBus::MessageIter ri = call.reader();

        std::map< ::DBus::String, ::DBus::String > argin1; ri >> argin1;
        addAccount(argin1);
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
    ::DBus::Message _removeAccount_stub( const ::DBus::CallMessage& call )
    {
        ::DBus::MessageIter ri = call.reader();

        ::DBus::String argin1; ri >> argin1;
        removeAccount(argin1);
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
    ::DBus::Message _getAccountList_stub( const ::DBus::CallMessage& call )
    {
        ::DBus::MessageIter ri = call.reader();

        std::vector< ::DBus::String > argout1 = getAccountList();
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _getVersion_stub( const ::DBus::CallMessage& call )
    {
        ::DBus::MessageIter ri = call.reader();

        ::DBus::String argout1 = getVersion();
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _getRingtoneList_stub( const ::DBus::CallMessage& call )
    {
        ::DBus::MessageIter ri = call.reader();

        std::vector< ::DBus::String > argout1 = getRingtoneList();
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _getCodecList_stub( const ::DBus::CallMessage& call )
    {
        ::DBus::MessageIter ri = call.reader();

        std::vector< ::DBus::String > argout1 = getCodecList();
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _getToneLocaleList_stub( const ::DBus::CallMessage& call )
    {
        ::DBus::MessageIter ri = call.reader();

        std::vector< ::DBus::String > argout1 = getToneLocaleList();
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _setCodecPreferedOrder_stub( const ::DBus::CallMessage& call )
    {
        ::DBus::MessageIter ri = call.reader();

        std::vector< ::DBus::String > argin1; ri >> argin1;
        setCodecPreferedOrder(argin1);
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
    ::DBus::Message _getCodecPreferedOrder_stub( const ::DBus::CallMessage& call )
    {
        ::DBus::MessageIter ri = call.reader();

        std::vector< ::DBus::String > argout1 = getCodecPreferedOrder();
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _getPlaybackDeviceList_stub( const ::DBus::CallMessage& call )
    {
        ::DBus::MessageIter ri = call.reader();

        std::vector< ::DBus::String > argout1 = getPlaybackDeviceList();
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _getRecordDeviceList_stub( const ::DBus::CallMessage& call )
    {
        ::DBus::MessageIter ri = call.reader();

        std::vector< ::DBus::String > argout1 = getRecordDeviceList();
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _getSampleRateList_stub( const ::DBus::CallMessage& call )
    {
        ::DBus::MessageIter ri = call.reader();

        std::vector< ::DBus::String > argout1 = getSampleRateList();
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _getDefaultAccount_stub( const ::DBus::CallMessage& call )
    {
        ::DBus::MessageIter ri = call.reader();

        std::map< ::DBus::String, ::DBus::String > argout1 = getDefaultAccount();
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _setDefaultAccount_stub( const ::DBus::CallMessage& call )
    {
        ::DBus::MessageIter ri = call.reader();

        ::DBus::String argin1; ri >> argin1;
        setDefaultAccount(argin1);
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
};

} } } 
#endif//__dbusxx__configurationmanager_glue_h__ADAPTOR_MARSHAL_H
