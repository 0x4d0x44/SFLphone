
/*
 *	This file was automatically generated by dbusxx-xml2cpp; DO NOT EDIT!
 */

#ifndef __dbusxx__contactmanager_glue_h__ADAPTOR_MARSHAL_H
#define __dbusxx__contactmanager_glue_h__ADAPTOR_MARSHAL_H

#include <dbus-c++/dbus.h>

namespace org {
namespace sflphone {
namespace SFLphone {

class ContactManager
: public ::DBus::InterfaceAdaptor
{
public:

    ContactManager()
    : ::DBus::InterfaceAdaptor("org.sflphone.SFLphone.ContactManager")
    {
        register_method(ContactManager, getContacts, _getContacts_stub);
        register_method(ContactManager, getContactDetails, _getContactDetails_stub);
        register_method(ContactManager, getContactEntries, _getContactEntries_stub);
        register_method(ContactManager, getContactEntryDetails, _getContactEntryDetails_stub);
        register_method(ContactManager, setContact, _setContact_stub);
        register_method(ContactManager, removeContact, _removeContact_stub);
        register_method(ContactManager, setContactEntry, _setContactEntry_stub);
        register_method(ContactManager, removeContactEntry, _removeContactEntry_stub);
        register_method(ContactManager, setPresence, _setPresence_stub);
    }

    ::DBus::IntrospectedInterface* const introspect() const 
    {
        static ::DBus::IntrospectedArgument getContacts_args[] = 
        {
            { "accountID", "s", true },
            { "contactIDs", "as", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument getContactDetails_args[] = 
        {
            { "accountID", "s", true },
            { "contactID", "s", true },
            { "details", "as", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument getContactEntries_args[] = 
        {
            { "accountID", "s", true },
            { "contactID", "s", true },
            { "contactEntryIDs", "as", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument getContactEntryDetails_args[] = 
        {
            { "accountID", "s", true },
            { "contactID", "s", true },
            { "contactEntryID", "s", true },
            { "details", "as", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument setContact_args[] = 
        {
            { "accountID", "s", true },
            { "contactID", "s", true },
            { "firstName", "s", true },
            { "lastName", "s", true },
            { "email", "s", true },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument removeContact_args[] = 
        {
            { "accountID", "s", true },
            { "contactID", "s", true },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument setContactEntry_args[] = 
        {
            { "accountID", "s", true },
            { "contactID", "s", true },
            { "entryID", "s", true },
            { "text", "s", true },
            { "type", "s", true },
            { "IsShown", "s", true },
            { "IsSubscribed", "s", true },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument removeContactEntry_args[] = 
        {
            { "accountID", "s", true },
            { "contactID", "s", true },
            { "entryID", "s", true },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument setPresence_args[] = 
        {
            { "accountID", "s", true },
            { "presence", "s", true },
            { "additionalInfo", "s", true },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument contactEntryPresenceChanged_args[] = 
        {
            { "accountID", "s", false },
            { "entryID", "s", false },
            { "presence", "s", false },
            { "additionalInfo", "s", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedMethod ContactManager_methods[] = 
        {
            { "getContacts", getContacts_args },
            { "getContactDetails", getContactDetails_args },
            { "getContactEntries", getContactEntries_args },
            { "getContactEntryDetails", getContactEntryDetails_args },
            { "setContact", setContact_args },
            { "removeContact", removeContact_args },
            { "setContactEntry", setContactEntry_args },
            { "removeContactEntry", removeContactEntry_args },
            { "setPresence", setPresence_args },
            { 0, 0 }
        };
        static ::DBus::IntrospectedMethod ContactManager_signals[] = 
        {
            { "contactEntryPresenceChanged", contactEntryPresenceChanged_args },
            { 0, 0 }
        };
        static ::DBus::IntrospectedProperty ContactManager_properties[] = 
        {
            { 0, 0, 0, 0 }
        };
        static ::DBus::IntrospectedInterface ContactManager_interface = 
        {
            "org.sflphone.SFLphone.ContactManager",
            ContactManager_methods,
            ContactManager_signals,
            ContactManager_properties
        };
        return &ContactManager_interface;
    }

public:

    /* properties exposed by this interface, use
     * property() and property(value) to get and set a particular property
     */

public:

    /* methods exported by this interface,
     * you will have to implement them in your ObjectAdaptor
     */
    virtual std::vector< ::DBus::String > getContacts( const ::DBus::String& accountID ) = 0;
    virtual std::vector< ::DBus::String > getContactDetails( const ::DBus::String& accountID, const ::DBus::String& contactID ) = 0;
    virtual std::vector< ::DBus::String > getContactEntries( const ::DBus::String& accountID, const ::DBus::String& contactID ) = 0;
    virtual std::vector< ::DBus::String > getContactEntryDetails( const ::DBus::String& accountID, const ::DBus::String& contactID, const ::DBus::String& contactEntryID ) = 0;
    virtual void setContact( const ::DBus::String& accountID, const ::DBus::String& contactID, const ::DBus::String& firstName, const ::DBus::String& lastName, const ::DBus::String& email ) = 0;
    virtual void removeContact( const ::DBus::String& accountID, const ::DBus::String& contactID ) = 0;
    virtual void setContactEntry( const ::DBus::String& accountID, const ::DBus::String& contactID, const ::DBus::String& entryID, const ::DBus::String& text, const ::DBus::String& type, const ::DBus::String& IsShown, const ::DBus::String& IsSubscribed ) = 0;
    virtual void removeContactEntry( const ::DBus::String& accountID, const ::DBus::String& contactID, const ::DBus::String& entryID ) = 0;
    virtual void setPresence( const ::DBus::String& accountID, const ::DBus::String& presence, const ::DBus::String& additionalInfo ) = 0;

public:

    /* signal emitters for this interface
     */
    void contactEntryPresenceChanged( const ::DBus::String& arg1, const ::DBus::String& arg2, const ::DBus::String& arg3, const ::DBus::String& arg4 )
    {
        ::DBus::SignalMessage sig("contactEntryPresenceChanged");
        ::DBus::MessageIter wi = sig.writer();
        wi << arg1;
        wi << arg2;
        wi << arg3;
        wi << arg4;
        emit_signal(sig);
    }

private:

    /* unmarshalers (to unpack the DBus message before calling the actual interface method)
     */
    ::DBus::Message _getContacts_stub( const ::DBus::CallMessage& call )
    {
        ::DBus::MessageIter ri = call.reader();

        ::DBus::String argin1; ri >> argin1;
        std::vector< ::DBus::String > argout1 = getContacts(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _getContactDetails_stub( const ::DBus::CallMessage& call )
    {
        ::DBus::MessageIter ri = call.reader();

        ::DBus::String argin1; ri >> argin1;
        ::DBus::String argin2; ri >> argin2;
        std::vector< ::DBus::String > argout1 = getContactDetails(argin1, argin2);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _getContactEntries_stub( const ::DBus::CallMessage& call )
    {
        ::DBus::MessageIter ri = call.reader();

        ::DBus::String argin1; ri >> argin1;
        ::DBus::String argin2; ri >> argin2;
        std::vector< ::DBus::String > argout1 = getContactEntries(argin1, argin2);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _getContactEntryDetails_stub( const ::DBus::CallMessage& call )
    {
        ::DBus::MessageIter ri = call.reader();

        ::DBus::String argin1; ri >> argin1;
        ::DBus::String argin2; ri >> argin2;
        ::DBus::String argin3; ri >> argin3;
        std::vector< ::DBus::String > argout1 = getContactEntryDetails(argin1, argin2, argin3);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _setContact_stub( const ::DBus::CallMessage& call )
    {
        ::DBus::MessageIter ri = call.reader();

        ::DBus::String argin1; ri >> argin1;
        ::DBus::String argin2; ri >> argin2;
        ::DBus::String argin3; ri >> argin3;
        ::DBus::String argin4; ri >> argin4;
        ::DBus::String argin5; ri >> argin5;
        setContact(argin1, argin2, argin3, argin4, argin5);
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
    ::DBus::Message _removeContact_stub( const ::DBus::CallMessage& call )
    {
        ::DBus::MessageIter ri = call.reader();

        ::DBus::String argin1; ri >> argin1;
        ::DBus::String argin2; ri >> argin2;
        removeContact(argin1, argin2);
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
    ::DBus::Message _setContactEntry_stub( const ::DBus::CallMessage& call )
    {
        ::DBus::MessageIter ri = call.reader();

        ::DBus::String argin1; ri >> argin1;
        ::DBus::String argin2; ri >> argin2;
        ::DBus::String argin3; ri >> argin3;
        ::DBus::String argin4; ri >> argin4;
        ::DBus::String argin5; ri >> argin5;
        ::DBus::String argin6; ri >> argin6;
        ::DBus::String argin7; ri >> argin7;
        setContactEntry(argin1, argin2, argin3, argin4, argin5, argin6, argin7);
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
    ::DBus::Message _removeContactEntry_stub( const ::DBus::CallMessage& call )
    {
        ::DBus::MessageIter ri = call.reader();

        ::DBus::String argin1; ri >> argin1;
        ::DBus::String argin2; ri >> argin2;
        ::DBus::String argin3; ri >> argin3;
        removeContactEntry(argin1, argin2, argin3);
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
    ::DBus::Message _setPresence_stub( const ::DBus::CallMessage& call )
    {
        ::DBus::MessageIter ri = call.reader();

        ::DBus::String argin1; ri >> argin1;
        ::DBus::String argin2; ri >> argin2;
        ::DBus::String argin3; ri >> argin3;
        setPresence(argin1, argin2, argin3);
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
};

} } } 
#endif//__dbusxx__contactmanager_glue_h__ADAPTOR_MARSHAL_H
