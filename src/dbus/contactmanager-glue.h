
/*
 *	This file was automatically generated by dbusxx-xml2cpp; DO NOT EDIT!
 */

#ifndef __dbusxx__contactmanager_glue_h__ADAPTOR_MARSHAL_H
#define __dbusxx__contactmanager_glue_h__ADAPTOR_MARSHAL_H

#include <dbus-c++/dbus.h>

namespace org {
namespace sflphone {
namespace SFLphone {

class ContactManager_adaptor
: public ::DBus::InterfaceAdaptor
{
public:

    ContactManager_adaptor()
    : ::DBus::InterfaceAdaptor("org.sflphone.SFLphone.ContactManager")
    {
        register_method(ContactManager_adaptor, getContacts, _getContacts_stub);
        register_method(ContactManager_adaptor, setContacts, _setContacts_stub);
        register_method(ContactManager_adaptor, setPresence, _setPresence_stub);
        register_method(ContactManager_adaptor, setContactPresence, _setContactPresence_stub);
    }

    ::DBus::IntrospectedInterface *const introspect() const 
    {
        static ::DBus::IntrospectedArgument getContacts_args[] = 
        {
            { "accountID", "s", true },
            { "details", "a{ss}", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument setContacts_args[] = 
        {
            { "accountID", "s", true },
            { "details", "a{ss}", true },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument setPresence_args[] = 
        {
            { "accountID", "s", true },
            { "presence", "s", true },
            { "additionalInfo", "s", true },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument setContactPresence_args[] = 
        {
            { "accountID", "s", true },
            { "presence", "s", true },
            { "additionalInfo", "s", true },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedMethod ContactManager_adaptor_methods[] = 
        {
            { "getContacts", getContacts_args },
            { "setContacts", setContacts_args },
            { "setPresence", setPresence_args },
            { "setContactPresence", setContactPresence_args },
            { 0, 0 }
        };
        static ::DBus::IntrospectedMethod ContactManager_adaptor_signals[] = 
        {
            { 0, 0 }
        };
        static ::DBus::IntrospectedProperty ContactManager_adaptor_properties[] = 
        {
            { 0, 0, 0, 0 }
        };
        static ::DBus::IntrospectedInterface ContactManager_adaptor_interface = 
        {
            "org.sflphone.SFLphone.ContactManager",
            ContactManager_adaptor_methods,
            ContactManager_adaptor_signals,
            ContactManager_adaptor_properties
        };
        return &ContactManager_adaptor_interface;
    }

public:

    /* properties exposed by this interface, use
     * property() and property(value) to get and set a particular property
     */

public:

    /* methods exported by this interface,
     * you will have to implement them in your ObjectAdaptor
     */
    virtual std::map< std::string, std::string > getContacts(const std::string& accountID) = 0;
    virtual void setContacts(const std::string& accountID, const std::map< std::string, std::string >& details) = 0;
    virtual void setPresence(const std::string& accountID, const std::string& presence, const std::string& additionalInfo) = 0;
    virtual void setContactPresence(const std::string& accountID, const std::string& presence, const std::string& additionalInfo) = 0;

public:

    /* signal emitters for this interface
     */

private:

    /* unmarshalers (to unpack the DBus message before calling the actual interface method)
     */
    ::DBus::Message _getContacts_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::string argin1; ri >> argin1;
        std::map< std::string, std::string > argout1 = getContacts(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _setContacts_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::string argin1; ri >> argin1;
        std::map< std::string, std::string > argin2; ri >> argin2;
        setContacts(argin1, argin2);
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
    ::DBus::Message _setPresence_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::string argin1; ri >> argin1;
        std::string argin2; ri >> argin2;
        std::string argin3; ri >> argin3;
        setPresence(argin1, argin2, argin3);
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
    ::DBus::Message _setContactPresence_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::string argin1; ri >> argin1;
        std::string argin2; ri >> argin2;
        std::string argin3; ri >> argin3;
        setContactPresence(argin1, argin2, argin3);
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
};

} } } 
#endif//__dbusxx__contactmanager_glue_h__ADAPTOR_MARSHAL_H
