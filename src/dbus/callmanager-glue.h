
/*
 *	This file was automatically generated by dbusxx-xml2cpp; DO NOT EDIT!
 */

#ifndef __dbusxx__callmanager_glue_h__ADAPTOR_MARSHAL_H
#define __dbusxx__callmanager_glue_h__ADAPTOR_MARSHAL_H

#include <dbus-c++/dbus.h>

namespace org {
namespace sflphone {
namespace SFLphone {

class CallManager
: public ::DBus::InterfaceAdaptor
{
public:

    CallManager()
    : ::DBus::InterfaceAdaptor("org.sflphone.SFLphone.CallManager")
    {
        register_method(CallManager, placeCall, _placeCall_stub);
        register_method(CallManager, refuse, _refuse_stub);
        register_method(CallManager, accept, _accept_stub);
        register_method(CallManager, hangUp, _hangUp_stub);
        register_method(CallManager, hold, _hold_stub);
        register_method(CallManager, unhold, _unhold_stub);
        register_method(CallManager, transfert, _transfert_stub);
        register_method(CallManager, playDTMF, _playDTMF_stub);
        register_method(CallManager, startTone, _startTone_stub);
        register_method(CallManager, setVolume, _setVolume_stub);
        register_method(CallManager, getVolume, _getVolume_stub);
        register_method(CallManager, getCallDetails, _getCallDetails_stub);
        register_method(CallManager, getCurrentCallID, _getCurrentCallID_stub);
        register_method(CallManager, getLocalSharedMemoryKey, _getLocalSharedMemoryKey_stub);
        register_method(CallManager, getRemoteSharedMemoryKey, _getRemoteSharedMemoryKey_stub);
        register_method(CallManager, inviteConference, _inviteConference_stub);
        register_method(CallManager, joinConference, _joinConference_stub);
        register_method(CallManager, changeWebcamStatus, _changeWebcamStatus_stub);
    }

    ::DBus::IntrospectedInterface* const introspect() const 
    {
        static ::DBus::IntrospectedArgument placeCall_args[] = 
        {
            { "accountID", "s", true },
            { "callID", "s", true },
            { "to", "s", true },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument refuse_args[] = 
        {
            { "callID", "s", true },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument accept_args[] = 
        {
            { "callID", "s", true },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument hangUp_args[] = 
        {
            { "callID", "s", true },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument hold_args[] = 
        {
            { "callID", "s", true },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument unhold_args[] = 
        {
            { "callID", "s", true },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument transfert_args[] = 
        {
            { "callID", "s", true },
            { "to", "s", true },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument playDTMF_args[] = 
        {
            { "key", "s", true },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument startTone_args[] = 
        {
            { "start", "i", true },
            { "type", "i", true },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument setVolume_args[] = 
        {
            { "device", "s", true },
            { "value", "d", true },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument getVolume_args[] = 
        {
            { "device", "s", true },
            { "value", "d", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument getCallDetails_args[] = 
        {
            { "callID", "s", true },
            { "infos", "a{ss}", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument getCurrentCallID_args[] = 
        {
            { "callID", "s", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument getLocalSharedMemoryKey_args[] = 
        {
            { "key", "s", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument getRemoteSharedMemoryKey_args[] = 
        {
            { "key", "s", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument inviteConference_args[] = 
        {
            { "accountID", "s", true },
            { "callID", "s", true },
            { "to", "s", true },
            { "response", "b", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument joinConference_args[] = 
        {
            { "onHoldCallID", "s", true },
            { "newCallID", "s", true },
            { "response", "b", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument changeWebcamStatus_args[] = 
        {
            { "status", "b", true },
            { "callID", "s", true },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument incomingCall_args[] = 
        {
            { "accountID", "s", false },
            { "callID", "s", false },
            { "from", "s", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument incomingMessage_args[] = 
        {
            { "accountID", "s", false },
            { "message", "s", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument callStateChanged_args[] = 
        {
            { "callID", "s", false },
            { "state", "s", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument voiceMailNotify_args[] = 
        {
            { "accountID", "s", false },
            { "count", "i", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument volumeChanged_args[] = 
        {
            { "device", "s", false },
            { "value", "d", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument error_args[] = 
        {
            { "details", "a{ss}", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedMethod CallManager_methods[] = 
        {
            { "placeCall", placeCall_args },
            { "refuse", refuse_args },
            { "accept", accept_args },
            { "hangUp", hangUp_args },
            { "hold", hold_args },
            { "unhold", unhold_args },
            { "transfert", transfert_args },
            { "playDTMF", playDTMF_args },
            { "startTone", startTone_args },
            { "setVolume", setVolume_args },
            { "getVolume", getVolume_args },
            { "getCallDetails", getCallDetails_args },
            { "getCurrentCallID", getCurrentCallID_args },
            { "getLocalSharedMemoryKey", getLocalSharedMemoryKey_args },
            { "getRemoteSharedMemoryKey", getRemoteSharedMemoryKey_args },
            { "inviteConference", inviteConference_args },
            { "joinConference", joinConference_args },
            { "changeWebcamStatus", changeWebcamStatus_args },
            { 0, 0 }
        };
        static ::DBus::IntrospectedMethod CallManager_signals[] = 
        {
            { "incomingCall", incomingCall_args },
            { "incomingMessage", incomingMessage_args },
            { "callStateChanged", callStateChanged_args },
            { "voiceMailNotify", voiceMailNotify_args },
            { "volumeChanged", volumeChanged_args },
            { "error", error_args },
            { 0, 0 }
        };
        static ::DBus::IntrospectedProperty CallManager_properties[] = 
        {
            { 0, 0, 0, 0 }
        };
        static ::DBus::IntrospectedInterface CallManager_interface = 
        {
            "org.sflphone.SFLphone.CallManager",
            CallManager_methods,
            CallManager_signals,
            CallManager_properties
        };
        return &CallManager_interface;
    }

public:

    /* properties exposed by this interface, use
     * property() and property(value) to get and set a particular property
     */

public:

    /* methods exported by this interface,
     * you will have to implement them in your ObjectAdaptor
     */
    virtual void placeCall( const ::DBus::String& accountID, const ::DBus::String& callID, const ::DBus::String& to ) = 0;
    virtual void refuse( const ::DBus::String& callID ) = 0;
    virtual void accept( const ::DBus::String& callID ) = 0;
    virtual void hangUp( const ::DBus::String& callID ) = 0;
    virtual void hold( const ::DBus::String& callID ) = 0;
    virtual void unhold( const ::DBus::String& callID ) = 0;
    virtual void transfert( const ::DBus::String& callID, const ::DBus::String& to ) = 0;
    virtual void playDTMF( const ::DBus::String& key ) = 0;
    virtual void startTone( const ::DBus::Int32& start, const ::DBus::Int32& type ) = 0;
    virtual void setVolume( const ::DBus::String& device, const ::DBus::Double& value ) = 0;
    virtual ::DBus::Double getVolume( const ::DBus::String& device ) = 0;
    virtual std::map< ::DBus::String, ::DBus::String > getCallDetails( const ::DBus::String& callID ) = 0;
    virtual ::DBus::String getCurrentCallID(  ) = 0;
    virtual ::DBus::String getLocalSharedMemoryKey(  ) = 0;
    virtual ::DBus::String getRemoteSharedMemoryKey(  ) = 0;
    virtual ::DBus::Bool inviteConference( const ::DBus::String& accountID, const ::DBus::String& callID, const ::DBus::String& to ) = 0;
    virtual ::DBus::Bool joinConference( const ::DBus::String& onHoldCallID, const ::DBus::String& newCallID ) = 0;
    virtual void changeWebcamStatus( const ::DBus::Bool& status, const ::DBus::String& callID ) = 0;

public:

    /* signal emitters for this interface
     */
    void incomingCall( const ::DBus::String& arg1, const ::DBus::String& arg2, const ::DBus::String& arg3 )
    {
        ::DBus::SignalMessage sig("incomingCall");
        ::DBus::MessageIter wi = sig.writer();
        wi << arg1;
        wi << arg2;
        wi << arg3;
        emit_signal(sig);
    }
    void incomingMessage( const ::DBus::String& arg1, const ::DBus::String& arg2 )
    {
        ::DBus::SignalMessage sig("incomingMessage");
        ::DBus::MessageIter wi = sig.writer();
        wi << arg1;
        wi << arg2;
        emit_signal(sig);
    }
    void callStateChanged( const ::DBus::String& arg1, const ::DBus::String& arg2 )
    {
        ::DBus::SignalMessage sig("callStateChanged");
        ::DBus::MessageIter wi = sig.writer();
        wi << arg1;
        wi << arg2;
        emit_signal(sig);
    }
    void voiceMailNotify( const ::DBus::String& arg1, const ::DBus::Int32& arg2 )
    {
        ::DBus::SignalMessage sig("voiceMailNotify");
        ::DBus::MessageIter wi = sig.writer();
        wi << arg1;
        wi << arg2;
        emit_signal(sig);
    }
    void volumeChanged( const ::DBus::String& arg1, const ::DBus::Double& arg2 )
    {
        ::DBus::SignalMessage sig("volumeChanged");
        ::DBus::MessageIter wi = sig.writer();
        wi << arg1;
        wi << arg2;
        emit_signal(sig);
    }
    void error( const std::map< ::DBus::String, ::DBus::String >& arg1 )
    {
        ::DBus::SignalMessage sig("error");
        ::DBus::MessageIter wi = sig.writer();
        wi << arg1;
        emit_signal(sig);
    }

private:

    /* unmarshalers (to unpack the DBus message before calling the actual interface method)
     */
    ::DBus::Message _placeCall_stub( const ::DBus::CallMessage& call )
    {
        ::DBus::MessageIter ri = call.reader();

        ::DBus::String argin1; ri >> argin1;
        ::DBus::String argin2; ri >> argin2;
        ::DBus::String argin3; ri >> argin3;
        placeCall(argin1, argin2, argin3);
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
    ::DBus::Message _refuse_stub( const ::DBus::CallMessage& call )
    {
        ::DBus::MessageIter ri = call.reader();

        ::DBus::String argin1; ri >> argin1;
        refuse(argin1);
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
    ::DBus::Message _accept_stub( const ::DBus::CallMessage& call )
    {
        ::DBus::MessageIter ri = call.reader();

        ::DBus::String argin1; ri >> argin1;
        accept(argin1);
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
    ::DBus::Message _hangUp_stub( const ::DBus::CallMessage& call )
    {
        ::DBus::MessageIter ri = call.reader();

        ::DBus::String argin1; ri >> argin1;
        hangUp(argin1);
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
    ::DBus::Message _hold_stub( const ::DBus::CallMessage& call )
    {
        ::DBus::MessageIter ri = call.reader();

        ::DBus::String argin1; ri >> argin1;
        hold(argin1);
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
    ::DBus::Message _unhold_stub( const ::DBus::CallMessage& call )
    {
        ::DBus::MessageIter ri = call.reader();

        ::DBus::String argin1; ri >> argin1;
        unhold(argin1);
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
    ::DBus::Message _transfert_stub( const ::DBus::CallMessage& call )
    {
        ::DBus::MessageIter ri = call.reader();

        ::DBus::String argin1; ri >> argin1;
        ::DBus::String argin2; ri >> argin2;
        transfert(argin1, argin2);
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
    ::DBus::Message _playDTMF_stub( const ::DBus::CallMessage& call )
    {
        ::DBus::MessageIter ri = call.reader();

        ::DBus::String argin1; ri >> argin1;
        playDTMF(argin1);
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
    ::DBus::Message _startTone_stub( const ::DBus::CallMessage& call )
    {
        ::DBus::MessageIter ri = call.reader();

        ::DBus::Int32 argin1; ri >> argin1;
        ::DBus::Int32 argin2; ri >> argin2;
        startTone(argin1, argin2);
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
    ::DBus::Message _setVolume_stub( const ::DBus::CallMessage& call )
    {
        ::DBus::MessageIter ri = call.reader();

        ::DBus::String argin1; ri >> argin1;
        ::DBus::Double argin2; ri >> argin2;
        setVolume(argin1, argin2);
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
    ::DBus::Message _getVolume_stub( const ::DBus::CallMessage& call )
    {
        ::DBus::MessageIter ri = call.reader();

        ::DBus::String argin1; ri >> argin1;
        ::DBus::Double argout1 = getVolume(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _getCallDetails_stub( const ::DBus::CallMessage& call )
    {
        ::DBus::MessageIter ri = call.reader();

        ::DBus::String argin1; ri >> argin1;
        std::map< ::DBus::String, ::DBus::String > argout1 = getCallDetails(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _getCurrentCallID_stub( const ::DBus::CallMessage& call )
    {
        ::DBus::MessageIter ri = call.reader();

        ::DBus::String argout1 = getCurrentCallID();
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _getLocalSharedMemoryKey_stub( const ::DBus::CallMessage& call )
    {
        ::DBus::MessageIter ri = call.reader();

        ::DBus::String argout1 = getLocalSharedMemoryKey();
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _getRemoteSharedMemoryKey_stub( const ::DBus::CallMessage& call )
    {
        ::DBus::MessageIter ri = call.reader();

        ::DBus::String argout1 = getRemoteSharedMemoryKey();
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _inviteConference_stub( const ::DBus::CallMessage& call )
    {
        ::DBus::MessageIter ri = call.reader();

        ::DBus::String argin1; ri >> argin1;
        ::DBus::String argin2; ri >> argin2;
        ::DBus::String argin3; ri >> argin3;
        ::DBus::Bool argout1 = inviteConference(argin1, argin2, argin3);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _joinConference_stub( const ::DBus::CallMessage& call )
    {
        ::DBus::MessageIter ri = call.reader();

        ::DBus::String argin1; ri >> argin1;
        ::DBus::String argin2; ri >> argin2;
        ::DBus::Bool argout1 = joinConference(argin1, argin2);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _changeWebcamStatus_stub( const ::DBus::CallMessage& call )
    {
        ::DBus::MessageIter ri = call.reader();

        ::DBus::Bool argin1; ri >> argin1;
        ::DBus::String argin2; ri >> argin2;
        changeWebcamStatus(argin1, argin2);
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
};

} } } 
#endif//__dbusxx__callmanager_glue_h__ADAPTOR_MARSHAL_H
