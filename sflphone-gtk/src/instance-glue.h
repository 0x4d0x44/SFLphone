/* Generated by dbus-binding-tool; do not edit! */

#include <glib/gtypes.h>
#include <glib/gerror.h>
#include <dbus/dbus-glib.h>

G_BEGIN_DECLS

#ifndef DBUS_GLIB_CLIENT_WRAPPERS_org_sflphone_SFLphone_Instance
#define DBUS_GLIB_CLIENT_WRAPPERS_org_sflphone_SFLphone_Instance

static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_sflphone_SFLphone_Instance_register (DBusGProxy *proxy, const gint IN_pid, const char * IN_name, GError **error)

{
  return dbus_g_proxy_call (proxy, "Register", error, G_TYPE_INT, IN_pid, G_TYPE_STRING, IN_name, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*org_sflphone_SFLphone_Instance_register_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_sflphone_SFLphone_Instance_register_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_sflphone_SFLphone_Instance_register_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_sflphone_SFLphone_Instance_register_async (DBusGProxy *proxy, const gint IN_pid, const char * IN_name, org_sflphone_SFLphone_Instance_register_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "Register", org_sflphone_SFLphone_Instance_register_async_callback, stuff, g_free, G_TYPE_INT, IN_pid, G_TYPE_STRING, IN_name, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_sflphone_SFLphone_Instance_unregister (DBusGProxy *proxy, const gint IN_pid, GError **error)

{
  return dbus_g_proxy_call (proxy, "Unregister", error, G_TYPE_INT, IN_pid, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*org_sflphone_SFLphone_Instance_unregister_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_sflphone_SFLphone_Instance_unregister_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_sflphone_SFLphone_Instance_unregister_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_sflphone_SFLphone_Instance_unregister_async (DBusGProxy *proxy, const gint IN_pid, org_sflphone_SFLphone_Instance_unregister_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "Unregister", org_sflphone_SFLphone_Instance_unregister_async_callback, stuff, g_free, G_TYPE_INT, IN_pid, G_TYPE_INVALID);
}
#endif /* defined DBUS_GLIB_CLIENT_WRAPPERS_org_sflphone_SFLphone_Instance */

G_END_DECLS
