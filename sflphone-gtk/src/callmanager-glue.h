/* Generated by dbus-binding-tool; do not edit! */

#include <glib.h>
#include <dbus/dbus-glib.h>

G_BEGIN_DECLS

#ifndef DBUS_GLIB_CLIENT_WRAPPERS_org_sflphone_SFLphone_CallManager
#define DBUS_GLIB_CLIENT_WRAPPERS_org_sflphone_SFLphone_CallManager

static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_sflphone_SFLphone_CallManager_place_call (DBusGProxy *proxy, const char * IN_accountID, const char * IN_callID, const char * IN_to, GError **error)

{
  return dbus_g_proxy_call (proxy, "placeCall", error, G_TYPE_STRING, IN_accountID, G_TYPE_STRING, IN_callID, G_TYPE_STRING, IN_to, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*org_sflphone_SFLphone_CallManager_place_call_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_sflphone_SFLphone_CallManager_place_call_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_sflphone_SFLphone_CallManager_place_call_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_sflphone_SFLphone_CallManager_place_call_async (DBusGProxy *proxy, const char * IN_accountID, const char * IN_callID, const char * IN_to, org_sflphone_SFLphone_CallManager_place_call_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "placeCall", org_sflphone_SFLphone_CallManager_place_call_async_callback, stuff, g_free, G_TYPE_STRING, IN_accountID, G_TYPE_STRING, IN_callID, G_TYPE_STRING, IN_to, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_sflphone_SFLphone_CallManager_refuse (DBusGProxy *proxy, const char * IN_callID, GError **error)

{
  return dbus_g_proxy_call (proxy, "refuse", error, G_TYPE_STRING, IN_callID, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*org_sflphone_SFLphone_CallManager_refuse_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_sflphone_SFLphone_CallManager_refuse_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_sflphone_SFLphone_CallManager_refuse_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_sflphone_SFLphone_CallManager_refuse_async (DBusGProxy *proxy, const char * IN_callID, org_sflphone_SFLphone_CallManager_refuse_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "refuse", org_sflphone_SFLphone_CallManager_refuse_async_callback, stuff, g_free, G_TYPE_STRING, IN_callID, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_sflphone_SFLphone_CallManager_accept (DBusGProxy *proxy, const char * IN_callID, GError **error)

{
  return dbus_g_proxy_call (proxy, "accept", error, G_TYPE_STRING, IN_callID, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*org_sflphone_SFLphone_CallManager_accept_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_sflphone_SFLphone_CallManager_accept_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_sflphone_SFLphone_CallManager_accept_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_sflphone_SFLphone_CallManager_accept_async (DBusGProxy *proxy, const char * IN_callID, org_sflphone_SFLphone_CallManager_accept_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "accept", org_sflphone_SFLphone_CallManager_accept_async_callback, stuff, g_free, G_TYPE_STRING, IN_callID, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_sflphone_SFLphone_CallManager_hang_up (DBusGProxy *proxy, const char * IN_callID, GError **error)

{
  return dbus_g_proxy_call (proxy, "hangUp", error, G_TYPE_STRING, IN_callID, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*org_sflphone_SFLphone_CallManager_hang_up_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_sflphone_SFLphone_CallManager_hang_up_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_sflphone_SFLphone_CallManager_hang_up_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_sflphone_SFLphone_CallManager_hang_up_async (DBusGProxy *proxy, const char * IN_callID, org_sflphone_SFLphone_CallManager_hang_up_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "hangUp", org_sflphone_SFLphone_CallManager_hang_up_async_callback, stuff, g_free, G_TYPE_STRING, IN_callID, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_sflphone_SFLphone_CallManager_hold (DBusGProxy *proxy, const char * IN_callID, GError **error)

{
  return dbus_g_proxy_call (proxy, "hold", error, G_TYPE_STRING, IN_callID, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*org_sflphone_SFLphone_CallManager_hold_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_sflphone_SFLphone_CallManager_hold_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_sflphone_SFLphone_CallManager_hold_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_sflphone_SFLphone_CallManager_hold_async (DBusGProxy *proxy, const char * IN_callID, org_sflphone_SFLphone_CallManager_hold_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "hold", org_sflphone_SFLphone_CallManager_hold_async_callback, stuff, g_free, G_TYPE_STRING, IN_callID, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_sflphone_SFLphone_CallManager_unhold (DBusGProxy *proxy, const char * IN_callID, GError **error)

{
  return dbus_g_proxy_call (proxy, "unhold", error, G_TYPE_STRING, IN_callID, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*org_sflphone_SFLphone_CallManager_unhold_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_sflphone_SFLphone_CallManager_unhold_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_sflphone_SFLphone_CallManager_unhold_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_sflphone_SFLphone_CallManager_unhold_async (DBusGProxy *proxy, const char * IN_callID, org_sflphone_SFLphone_CallManager_unhold_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "unhold", org_sflphone_SFLphone_CallManager_unhold_async_callback, stuff, g_free, G_TYPE_STRING, IN_callID, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_sflphone_SFLphone_CallManager_transfert (DBusGProxy *proxy, const char * IN_callID, const char * IN_to, GError **error)

{
  return dbus_g_proxy_call (proxy, "transfert", error, G_TYPE_STRING, IN_callID, G_TYPE_STRING, IN_to, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*org_sflphone_SFLphone_CallManager_transfert_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_sflphone_SFLphone_CallManager_transfert_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_sflphone_SFLphone_CallManager_transfert_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_sflphone_SFLphone_CallManager_transfert_async (DBusGProxy *proxy, const char * IN_callID, const char * IN_to, org_sflphone_SFLphone_CallManager_transfert_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "transfert", org_sflphone_SFLphone_CallManager_transfert_async_callback, stuff, g_free, G_TYPE_STRING, IN_callID, G_TYPE_STRING, IN_to, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_sflphone_SFLphone_CallManager_play_dt_mf (DBusGProxy *proxy, const char * IN_key, GError **error)

{
  return dbus_g_proxy_call (proxy, "playDTMF", error, G_TYPE_STRING, IN_key, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*org_sflphone_SFLphone_CallManager_play_dt_mf_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_sflphone_SFLphone_CallManager_play_dt_mf_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_sflphone_SFLphone_CallManager_play_dt_mf_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_sflphone_SFLphone_CallManager_play_dt_mf_async (DBusGProxy *proxy, const char * IN_key, org_sflphone_SFLphone_CallManager_play_dt_mf_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "playDTMF", org_sflphone_SFLphone_CallManager_play_dt_mf_async_callback, stuff, g_free, G_TYPE_STRING, IN_key, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_sflphone_SFLphone_CallManager_start_tone (DBusGProxy *proxy, const gint IN_start, const gint IN_type, GError **error)

{
  return dbus_g_proxy_call (proxy, "startTone", error, G_TYPE_INT, IN_start, G_TYPE_INT, IN_type, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*org_sflphone_SFLphone_CallManager_start_tone_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_sflphone_SFLphone_CallManager_start_tone_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_sflphone_SFLphone_CallManager_start_tone_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_sflphone_SFLphone_CallManager_start_tone_async (DBusGProxy *proxy, const gint IN_start, const gint IN_type, org_sflphone_SFLphone_CallManager_start_tone_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "startTone", org_sflphone_SFLphone_CallManager_start_tone_async_callback, stuff, g_free, G_TYPE_INT, IN_start, G_TYPE_INT, IN_type, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_sflphone_SFLphone_CallManager_set_volume (DBusGProxy *proxy, const char * IN_device, const gdouble IN_value, GError **error)

{
  return dbus_g_proxy_call (proxy, "setVolume", error, G_TYPE_STRING, IN_device, G_TYPE_DOUBLE, IN_value, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*org_sflphone_SFLphone_CallManager_set_volume_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_sflphone_SFLphone_CallManager_set_volume_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_sflphone_SFLphone_CallManager_set_volume_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_sflphone_SFLphone_CallManager_set_volume_async (DBusGProxy *proxy, const char * IN_device, const gdouble IN_value, org_sflphone_SFLphone_CallManager_set_volume_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "setVolume", org_sflphone_SFLphone_CallManager_set_volume_async_callback, stuff, g_free, G_TYPE_STRING, IN_device, G_TYPE_DOUBLE, IN_value, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_sflphone_SFLphone_CallManager_get_volume (DBusGProxy *proxy, const char * IN_device, gdouble* OUT_value, GError **error)

{
  return dbus_g_proxy_call (proxy, "getVolume", error, G_TYPE_STRING, IN_device, G_TYPE_INVALID, G_TYPE_DOUBLE, OUT_value, G_TYPE_INVALID);
}

typedef void (*org_sflphone_SFLphone_CallManager_get_volume_reply) (DBusGProxy *proxy, gdouble OUT_value, GError *error, gpointer userdata);

static void
org_sflphone_SFLphone_CallManager_get_volume_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  gdouble OUT_value;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_DOUBLE, &OUT_value, G_TYPE_INVALID);
  (*(org_sflphone_SFLphone_CallManager_get_volume_reply)data->cb) (proxy, OUT_value, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_sflphone_SFLphone_CallManager_get_volume_async (DBusGProxy *proxy, const char * IN_device, org_sflphone_SFLphone_CallManager_get_volume_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "getVolume", org_sflphone_SFLphone_CallManager_get_volume_async_callback, stuff, g_free, G_TYPE_STRING, IN_device, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_sflphone_SFLphone_CallManager_set_recording (DBusGProxy *proxy, const char * IN_callID, GError **error)

{
  return dbus_g_proxy_call (proxy, "setRecording", error, G_TYPE_STRING, IN_callID, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*org_sflphone_SFLphone_CallManager_set_recording_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_sflphone_SFLphone_CallManager_set_recording_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_sflphone_SFLphone_CallManager_set_recording_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_sflphone_SFLphone_CallManager_set_recording_async (DBusGProxy *proxy, const char * IN_callID, org_sflphone_SFLphone_CallManager_set_recording_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "setRecording", org_sflphone_SFLphone_CallManager_set_recording_async_callback, stuff, g_free, G_TYPE_STRING, IN_callID, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_sflphone_SFLphone_CallManager_get_call_details (DBusGProxy *proxy, const char * IN_callID, GHashTable** OUT_infos, GError **error)

{
  return dbus_g_proxy_call (proxy, "getCallDetails", error, G_TYPE_STRING, IN_callID, G_TYPE_INVALID, dbus_g_type_get_map ("GHashTable", G_TYPE_STRING, G_TYPE_STRING), OUT_infos, G_TYPE_INVALID);
}

typedef void (*org_sflphone_SFLphone_CallManager_get_call_details_reply) (DBusGProxy *proxy, GHashTable *OUT_infos, GError *error, gpointer userdata);

static void
org_sflphone_SFLphone_CallManager_get_call_details_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  GHashTable* OUT_infos;
  dbus_g_proxy_end_call (proxy, call, &error, dbus_g_type_get_map ("GHashTable", G_TYPE_STRING, G_TYPE_STRING), &OUT_infos, G_TYPE_INVALID);
  (*(org_sflphone_SFLphone_CallManager_get_call_details_reply)data->cb) (proxy, OUT_infos, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_sflphone_SFLphone_CallManager_get_call_details_async (DBusGProxy *proxy, const char * IN_callID, org_sflphone_SFLphone_CallManager_get_call_details_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "getCallDetails", org_sflphone_SFLphone_CallManager_get_call_details_async_callback, stuff, g_free, G_TYPE_STRING, IN_callID, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_sflphone_SFLphone_CallManager_get_current_call_id (DBusGProxy *proxy, char ** OUT_callID, GError **error)

{
  return dbus_g_proxy_call (proxy, "getCurrentCallID", error, G_TYPE_INVALID, G_TYPE_STRING, OUT_callID, G_TYPE_INVALID);
}

typedef void (*org_sflphone_SFLphone_CallManager_get_current_call_id_reply) (DBusGProxy *proxy, char * OUT_callID, GError *error, gpointer userdata);

static void
org_sflphone_SFLphone_CallManager_get_current_call_id_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  char * OUT_callID;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_STRING, &OUT_callID, G_TYPE_INVALID);
  (*(org_sflphone_SFLphone_CallManager_get_current_call_id_reply)data->cb) (proxy, OUT_callID, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_sflphone_SFLphone_CallManager_get_current_call_id_async (DBusGProxy *proxy, org_sflphone_SFLphone_CallManager_get_current_call_id_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "getCurrentCallID", org_sflphone_SFLphone_CallManager_get_current_call_id_async_callback, stuff, g_free, G_TYPE_INVALID);
}
#endif /* defined DBUS_GLIB_CLIENT_WRAPPERS_org_sflphone_SFLphone_CallManager */

G_END_DECLS
