/* Generated by dbus-binding-tool; do not edit! */

#include <glib/gtypes.h>
#include <glib/gerror.h>
#include <dbus/dbus-glib.h>

G_BEGIN_DECLS

#ifndef DBUS_GLIB_CLIENT_WRAPPERS_org_sflphone_SFLphone_ConfigurationManager
#define DBUS_GLIB_CLIENT_WRAPPERS_org_sflphone_SFLphone_ConfigurationManager

static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_sflphone_SFLphone_ConfigurationManager_get_account_details (DBusGProxy *proxy, const char * IN_accountID, GHashTable** OUT_details, GError **error)

{
  return dbus_g_proxy_call (proxy, "getAccountDetails", error, G_TYPE_STRING, IN_accountID, G_TYPE_INVALID, dbus_g_type_get_map ("GHashTable", G_TYPE_STRING, G_TYPE_STRING), OUT_details, G_TYPE_INVALID);
}

typedef void (*org_sflphone_SFLphone_ConfigurationManager_get_account_details_reply) (DBusGProxy *proxy, GHashTable *OUT_details, GError *error, gpointer userdata);

static void
org_sflphone_SFLphone_ConfigurationManager_get_account_details_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  GHashTable* OUT_details;
  dbus_g_proxy_end_call (proxy, call, &error, dbus_g_type_get_map ("GHashTable", G_TYPE_STRING, G_TYPE_STRING), &OUT_details, G_TYPE_INVALID);
  (*(org_sflphone_SFLphone_ConfigurationManager_get_account_details_reply)data->cb) (proxy, OUT_details, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_sflphone_SFLphone_ConfigurationManager_get_account_details_async (DBusGProxy *proxy, const char * IN_accountID, org_sflphone_SFLphone_ConfigurationManager_get_account_details_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "getAccountDetails", org_sflphone_SFLphone_ConfigurationManager_get_account_details_async_callback, stuff, g_free, G_TYPE_STRING, IN_accountID, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_sflphone_SFLphone_ConfigurationManager_set_account_details (DBusGProxy *proxy, const char * IN_accountID, const GHashTable* IN_details, GError **error)

{
  return dbus_g_proxy_call (proxy, "setAccountDetails", error, G_TYPE_STRING, IN_accountID, dbus_g_type_get_map ("GHashTable", G_TYPE_STRING, G_TYPE_STRING), IN_details, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*org_sflphone_SFLphone_ConfigurationManager_set_account_details_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_sflphone_SFLphone_ConfigurationManager_set_account_details_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_sflphone_SFLphone_ConfigurationManager_set_account_details_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_sflphone_SFLphone_ConfigurationManager_set_account_details_async (DBusGProxy *proxy, const char * IN_accountID, const GHashTable* IN_details, org_sflphone_SFLphone_ConfigurationManager_set_account_details_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "setAccountDetails", org_sflphone_SFLphone_ConfigurationManager_set_account_details_async_callback, stuff, g_free, G_TYPE_STRING, IN_accountID, dbus_g_type_get_map ("GHashTable", G_TYPE_STRING, G_TYPE_STRING), IN_details, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_sflphone_SFLphone_ConfigurationManager_add_account (DBusGProxy *proxy, const GHashTable* IN_details, GError **error)

{
  return dbus_g_proxy_call (proxy, "addAccount", error, dbus_g_type_get_map ("GHashTable", G_TYPE_STRING, G_TYPE_STRING), IN_details, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*org_sflphone_SFLphone_ConfigurationManager_add_account_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_sflphone_SFLphone_ConfigurationManager_add_account_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_sflphone_SFLphone_ConfigurationManager_add_account_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_sflphone_SFLphone_ConfigurationManager_add_account_async (DBusGProxy *proxy, const GHashTable* IN_details, org_sflphone_SFLphone_ConfigurationManager_add_account_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "addAccount", org_sflphone_SFLphone_ConfigurationManager_add_account_async_callback, stuff, g_free, dbus_g_type_get_map ("GHashTable", G_TYPE_STRING, G_TYPE_STRING), IN_details, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_sflphone_SFLphone_ConfigurationManager_remove_account (DBusGProxy *proxy, const char * IN_accoundID, GError **error)

{
  return dbus_g_proxy_call (proxy, "removeAccount", error, G_TYPE_STRING, IN_accoundID, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*org_sflphone_SFLphone_ConfigurationManager_remove_account_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_sflphone_SFLphone_ConfigurationManager_remove_account_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_sflphone_SFLphone_ConfigurationManager_remove_account_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_sflphone_SFLphone_ConfigurationManager_remove_account_async (DBusGProxy *proxy, const char * IN_accoundID, org_sflphone_SFLphone_ConfigurationManager_remove_account_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "removeAccount", org_sflphone_SFLphone_ConfigurationManager_remove_account_async_callback, stuff, g_free, G_TYPE_STRING, IN_accoundID, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_sflphone_SFLphone_ConfigurationManager_get_account_list (DBusGProxy *proxy, char *** OUT_list, GError **error)

{
  return dbus_g_proxy_call (proxy, "getAccountList", error, G_TYPE_INVALID, G_TYPE_STRV, OUT_list, G_TYPE_INVALID);
}

typedef void (*org_sflphone_SFLphone_ConfigurationManager_get_account_list_reply) (DBusGProxy *proxy, char * *OUT_list, GError *error, gpointer userdata);

static void
org_sflphone_SFLphone_ConfigurationManager_get_account_list_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  char ** OUT_list;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_STRV, &OUT_list, G_TYPE_INVALID);
  (*(org_sflphone_SFLphone_ConfigurationManager_get_account_list_reply)data->cb) (proxy, OUT_list, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_sflphone_SFLphone_ConfigurationManager_get_account_list_async (DBusGProxy *proxy, org_sflphone_SFLphone_ConfigurationManager_get_account_list_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "getAccountList", org_sflphone_SFLphone_ConfigurationManager_get_account_list_async_callback, stuff, g_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_sflphone_SFLphone_ConfigurationManager_get_default_account (DBusGProxy *proxy, char ** OUT_accountID, GError **error)

{
  return dbus_g_proxy_call (proxy, "getDefaultAccount", error, G_TYPE_INVALID, G_TYPE_STRING, OUT_accountID, G_TYPE_INVALID);
}

typedef void (*org_sflphone_SFLphone_ConfigurationManager_get_default_account_reply) (DBusGProxy *proxy, char * OUT_accountID, GError *error, gpointer userdata);

static void
org_sflphone_SFLphone_ConfigurationManager_get_default_account_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  char * OUT_accountID;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_STRING, &OUT_accountID, G_TYPE_INVALID);
  (*(org_sflphone_SFLphone_ConfigurationManager_get_default_account_reply)data->cb) (proxy, OUT_accountID, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_sflphone_SFLphone_ConfigurationManager_get_default_account_async (DBusGProxy *proxy, org_sflphone_SFLphone_ConfigurationManager_get_default_account_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "getDefaultAccount", org_sflphone_SFLphone_ConfigurationManager_get_default_account_async_callback, stuff, g_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_sflphone_SFLphone_ConfigurationManager_set_default_account (DBusGProxy *proxy, const char * IN_accountID, GError **error)

{
  return dbus_g_proxy_call (proxy, "setDefaultAccount", error, G_TYPE_STRING, IN_accountID, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*org_sflphone_SFLphone_ConfigurationManager_set_default_account_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_sflphone_SFLphone_ConfigurationManager_set_default_account_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_sflphone_SFLphone_ConfigurationManager_set_default_account_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_sflphone_SFLphone_ConfigurationManager_set_default_account_async (DBusGProxy *proxy, const char * IN_accountID, org_sflphone_SFLphone_ConfigurationManager_set_default_account_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "setDefaultAccount", org_sflphone_SFLphone_ConfigurationManager_set_default_account_async_callback, stuff, g_free, G_TYPE_STRING, IN_accountID, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_sflphone_SFLphone_ConfigurationManager_get_tone_locale_list (DBusGProxy *proxy, char *** OUT_list, GError **error)

{
  return dbus_g_proxy_call (proxy, "getToneLocaleList", error, G_TYPE_INVALID, G_TYPE_STRV, OUT_list, G_TYPE_INVALID);
}

typedef void (*org_sflphone_SFLphone_ConfigurationManager_get_tone_locale_list_reply) (DBusGProxy *proxy, char * *OUT_list, GError *error, gpointer userdata);

static void
org_sflphone_SFLphone_ConfigurationManager_get_tone_locale_list_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  char ** OUT_list;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_STRV, &OUT_list, G_TYPE_INVALID);
  (*(org_sflphone_SFLphone_ConfigurationManager_get_tone_locale_list_reply)data->cb) (proxy, OUT_list, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_sflphone_SFLphone_ConfigurationManager_get_tone_locale_list_async (DBusGProxy *proxy, org_sflphone_SFLphone_ConfigurationManager_get_tone_locale_list_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "getToneLocaleList", org_sflphone_SFLphone_ConfigurationManager_get_tone_locale_list_async_callback, stuff, g_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_sflphone_SFLphone_ConfigurationManager_get_version (DBusGProxy *proxy, char ** OUT_version, GError **error)

{
  return dbus_g_proxy_call (proxy, "getVersion", error, G_TYPE_INVALID, G_TYPE_STRING, OUT_version, G_TYPE_INVALID);
}

typedef void (*org_sflphone_SFLphone_ConfigurationManager_get_version_reply) (DBusGProxy *proxy, char * OUT_version, GError *error, gpointer userdata);

static void
org_sflphone_SFLphone_ConfigurationManager_get_version_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  char * OUT_version;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_STRING, &OUT_version, G_TYPE_INVALID);
  (*(org_sflphone_SFLphone_ConfigurationManager_get_version_reply)data->cb) (proxy, OUT_version, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_sflphone_SFLphone_ConfigurationManager_get_version_async (DBusGProxy *proxy, org_sflphone_SFLphone_ConfigurationManager_get_version_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "getVersion", org_sflphone_SFLphone_ConfigurationManager_get_version_async_callback, stuff, g_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_sflphone_SFLphone_ConfigurationManager_get_ringtone_list (DBusGProxy *proxy, char *** OUT_list, GError **error)

{
  return dbus_g_proxy_call (proxy, "getRingtoneList", error, G_TYPE_INVALID, G_TYPE_STRV, OUT_list, G_TYPE_INVALID);
}

typedef void (*org_sflphone_SFLphone_ConfigurationManager_get_ringtone_list_reply) (DBusGProxy *proxy, char * *OUT_list, GError *error, gpointer userdata);

static void
org_sflphone_SFLphone_ConfigurationManager_get_ringtone_list_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  char ** OUT_list;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_STRV, &OUT_list, G_TYPE_INVALID);
  (*(org_sflphone_SFLphone_ConfigurationManager_get_ringtone_list_reply)data->cb) (proxy, OUT_list, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_sflphone_SFLphone_ConfigurationManager_get_ringtone_list_async (DBusGProxy *proxy, org_sflphone_SFLphone_ConfigurationManager_get_ringtone_list_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "getRingtoneList", org_sflphone_SFLphone_ConfigurationManager_get_ringtone_list_async_callback, stuff, g_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_sflphone_SFLphone_ConfigurationManager_get_playback_device_list (DBusGProxy *proxy, char *** OUT_list, GError **error)

{
  return dbus_g_proxy_call (proxy, "getPlaybackDeviceList", error, G_TYPE_INVALID, G_TYPE_STRV, OUT_list, G_TYPE_INVALID);
}

typedef void (*org_sflphone_SFLphone_ConfigurationManager_get_playback_device_list_reply) (DBusGProxy *proxy, char * *OUT_list, GError *error, gpointer userdata);

static void
org_sflphone_SFLphone_ConfigurationManager_get_playback_device_list_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  char ** OUT_list;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_STRV, &OUT_list, G_TYPE_INVALID);
  (*(org_sflphone_SFLphone_ConfigurationManager_get_playback_device_list_reply)data->cb) (proxy, OUT_list, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_sflphone_SFLphone_ConfigurationManager_get_playback_device_list_async (DBusGProxy *proxy, org_sflphone_SFLphone_ConfigurationManager_get_playback_device_list_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "getPlaybackDeviceList", org_sflphone_SFLphone_ConfigurationManager_get_playback_device_list_async_callback, stuff, g_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_sflphone_SFLphone_ConfigurationManager_get_record_device_list (DBusGProxy *proxy, char *** OUT_list, GError **error)

{
  return dbus_g_proxy_call (proxy, "getRecordDeviceList", error, G_TYPE_INVALID, G_TYPE_STRV, OUT_list, G_TYPE_INVALID);
}

typedef void (*org_sflphone_SFLphone_ConfigurationManager_get_record_device_list_reply) (DBusGProxy *proxy, char * *OUT_list, GError *error, gpointer userdata);

static void
org_sflphone_SFLphone_ConfigurationManager_get_record_device_list_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  char ** OUT_list;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_STRV, &OUT_list, G_TYPE_INVALID);
  (*(org_sflphone_SFLphone_ConfigurationManager_get_record_device_list_reply)data->cb) (proxy, OUT_list, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_sflphone_SFLphone_ConfigurationManager_get_record_device_list_async (DBusGProxy *proxy, org_sflphone_SFLphone_ConfigurationManager_get_record_device_list_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "getRecordDeviceList", org_sflphone_SFLphone_ConfigurationManager_get_record_device_list_async_callback, stuff, g_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_sflphone_SFLphone_ConfigurationManager_is_ringtone_enabled (DBusGProxy *proxy, gint* OUT_bool, GError **error)

{
  return dbus_g_proxy_call (proxy, "isRingtoneEnabled", error, G_TYPE_INVALID, G_TYPE_INT, OUT_bool, G_TYPE_INVALID);
}

typedef void (*org_sflphone_SFLphone_ConfigurationManager_is_ringtone_enabled_reply) (DBusGProxy *proxy, gint OUT_bool, GError *error, gpointer userdata);

static void
org_sflphone_SFLphone_ConfigurationManager_is_ringtone_enabled_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  gint OUT_bool;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INT, &OUT_bool, G_TYPE_INVALID);
  (*(org_sflphone_SFLphone_ConfigurationManager_is_ringtone_enabled_reply)data->cb) (proxy, OUT_bool, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_sflphone_SFLphone_ConfigurationManager_is_ringtone_enabled_async (DBusGProxy *proxy, org_sflphone_SFLphone_ConfigurationManager_is_ringtone_enabled_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "isRingtoneEnabled", org_sflphone_SFLphone_ConfigurationManager_is_ringtone_enabled_async_callback, stuff, g_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_sflphone_SFLphone_ConfigurationManager_ringtone_enabled (DBusGProxy *proxy, GError **error)

{
  return dbus_g_proxy_call (proxy, "ringtoneEnabled", error, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*org_sflphone_SFLphone_ConfigurationManager_ringtone_enabled_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_sflphone_SFLphone_ConfigurationManager_ringtone_enabled_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_sflphone_SFLphone_ConfigurationManager_ringtone_enabled_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_sflphone_SFLphone_ConfigurationManager_ringtone_enabled_async (DBusGProxy *proxy, org_sflphone_SFLphone_ConfigurationManager_ringtone_enabled_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "ringtoneEnabled", org_sflphone_SFLphone_ConfigurationManager_ringtone_enabled_async_callback, stuff, g_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_sflphone_SFLphone_ConfigurationManager_get_ringtone_choice (DBusGProxy *proxy, char ** OUT_tone, GError **error)

{
  return dbus_g_proxy_call (proxy, "getRingtoneChoice", error, G_TYPE_INVALID, G_TYPE_STRING, OUT_tone, G_TYPE_INVALID);
}

typedef void (*org_sflphone_SFLphone_ConfigurationManager_get_ringtone_choice_reply) (DBusGProxy *proxy, char * OUT_tone, GError *error, gpointer userdata);

static void
org_sflphone_SFLphone_ConfigurationManager_get_ringtone_choice_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  char * OUT_tone;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_STRING, &OUT_tone, G_TYPE_INVALID);
  (*(org_sflphone_SFLphone_ConfigurationManager_get_ringtone_choice_reply)data->cb) (proxy, OUT_tone, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_sflphone_SFLphone_ConfigurationManager_get_ringtone_choice_async (DBusGProxy *proxy, org_sflphone_SFLphone_ConfigurationManager_get_ringtone_choice_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "getRingtoneChoice", org_sflphone_SFLphone_ConfigurationManager_get_ringtone_choice_async_callback, stuff, g_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_sflphone_SFLphone_ConfigurationManager_set_ringtone_choice (DBusGProxy *proxy, const char * IN_tone, GError **error)

{
  return dbus_g_proxy_call (proxy, "setRingtoneChoice", error, G_TYPE_STRING, IN_tone, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*org_sflphone_SFLphone_ConfigurationManager_set_ringtone_choice_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_sflphone_SFLphone_ConfigurationManager_set_ringtone_choice_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_sflphone_SFLphone_ConfigurationManager_set_ringtone_choice_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_sflphone_SFLphone_ConfigurationManager_set_ringtone_choice_async (DBusGProxy *proxy, const char * IN_tone, org_sflphone_SFLphone_ConfigurationManager_set_ringtone_choice_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "setRingtoneChoice", org_sflphone_SFLphone_ConfigurationManager_set_ringtone_choice_async_callback, stuff, g_free, G_TYPE_STRING, IN_tone, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_sflphone_SFLphone_ConfigurationManager_get_codec_list (DBusGProxy *proxy, char *** OUT_list, GError **error)

{
  return dbus_g_proxy_call (proxy, "getCodecList", error, G_TYPE_INVALID, G_TYPE_STRV, OUT_list, G_TYPE_INVALID);
}

typedef void (*org_sflphone_SFLphone_ConfigurationManager_get_codec_list_reply) (DBusGProxy *proxy, char * *OUT_list, GError *error, gpointer userdata);

static void
org_sflphone_SFLphone_ConfigurationManager_get_codec_list_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  char ** OUT_list;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_STRV, &OUT_list, G_TYPE_INVALID);
  (*(org_sflphone_SFLphone_ConfigurationManager_get_codec_list_reply)data->cb) (proxy, OUT_list, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_sflphone_SFLphone_ConfigurationManager_get_codec_list_async (DBusGProxy *proxy, org_sflphone_SFLphone_ConfigurationManager_get_codec_list_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "getCodecList", org_sflphone_SFLphone_ConfigurationManager_get_codec_list_async_callback, stuff, g_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_sflphone_SFLphone_ConfigurationManager_get_codec_details (DBusGProxy *proxy, const gint IN_payload, char *** OUT_details, GError **error)

{
  return dbus_g_proxy_call (proxy, "getCodecDetails", error, G_TYPE_INT, IN_payload, G_TYPE_INVALID, G_TYPE_STRV, OUT_details, G_TYPE_INVALID);
}

typedef void (*org_sflphone_SFLphone_ConfigurationManager_get_codec_details_reply) (DBusGProxy *proxy, char * *OUT_details, GError *error, gpointer userdata);

static void
org_sflphone_SFLphone_ConfigurationManager_get_codec_details_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  char ** OUT_details;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_STRV, &OUT_details, G_TYPE_INVALID);
  (*(org_sflphone_SFLphone_ConfigurationManager_get_codec_details_reply)data->cb) (proxy, OUT_details, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_sflphone_SFLphone_ConfigurationManager_get_codec_details_async (DBusGProxy *proxy, const gint IN_payload, org_sflphone_SFLphone_ConfigurationManager_get_codec_details_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "getCodecDetails", org_sflphone_SFLphone_ConfigurationManager_get_codec_details_async_callback, stuff, g_free, G_TYPE_INT, IN_payload, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_sflphone_SFLphone_ConfigurationManager_get_active_codec_list (DBusGProxy *proxy, char *** OUT_list, GError **error)

{
  return dbus_g_proxy_call (proxy, "getActiveCodecList", error, G_TYPE_INVALID, G_TYPE_STRV, OUT_list, G_TYPE_INVALID);
}

typedef void (*org_sflphone_SFLphone_ConfigurationManager_get_active_codec_list_reply) (DBusGProxy *proxy, char * *OUT_list, GError *error, gpointer userdata);

static void
org_sflphone_SFLphone_ConfigurationManager_get_active_codec_list_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  char ** OUT_list;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_STRV, &OUT_list, G_TYPE_INVALID);
  (*(org_sflphone_SFLphone_ConfigurationManager_get_active_codec_list_reply)data->cb) (proxy, OUT_list, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_sflphone_SFLphone_ConfigurationManager_get_active_codec_list_async (DBusGProxy *proxy, org_sflphone_SFLphone_ConfigurationManager_get_active_codec_list_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "getActiveCodecList", org_sflphone_SFLphone_ConfigurationManager_get_active_codec_list_async_callback, stuff, g_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_sflphone_SFLphone_ConfigurationManager_set_active_codec_list (DBusGProxy *proxy, const char ** IN_list, GError **error)

{
  return dbus_g_proxy_call (proxy, "setActiveCodecList", error, G_TYPE_STRV, IN_list, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*org_sflphone_SFLphone_ConfigurationManager_set_active_codec_list_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_sflphone_SFLphone_ConfigurationManager_set_active_codec_list_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_sflphone_SFLphone_ConfigurationManager_set_active_codec_list_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_sflphone_SFLphone_ConfigurationManager_set_active_codec_list_async (DBusGProxy *proxy, const char ** IN_list, org_sflphone_SFLphone_ConfigurationManager_set_active_codec_list_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "setActiveCodecList", org_sflphone_SFLphone_ConfigurationManager_set_active_codec_list_async_callback, stuff, g_free, G_TYPE_STRV, IN_list, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_sflphone_SFLphone_ConfigurationManager_get_input_audio_plugin_list (DBusGProxy *proxy, char *** OUT_list, GError **error)

{
  return dbus_g_proxy_call (proxy, "getInputAudioPluginList", error, G_TYPE_INVALID, G_TYPE_STRV, OUT_list, G_TYPE_INVALID);
}

typedef void (*org_sflphone_SFLphone_ConfigurationManager_get_input_audio_plugin_list_reply) (DBusGProxy *proxy, char * *OUT_list, GError *error, gpointer userdata);

static void
org_sflphone_SFLphone_ConfigurationManager_get_input_audio_plugin_list_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  char ** OUT_list;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_STRV, &OUT_list, G_TYPE_INVALID);
  (*(org_sflphone_SFLphone_ConfigurationManager_get_input_audio_plugin_list_reply)data->cb) (proxy, OUT_list, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_sflphone_SFLphone_ConfigurationManager_get_input_audio_plugin_list_async (DBusGProxy *proxy, org_sflphone_SFLphone_ConfigurationManager_get_input_audio_plugin_list_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "getInputAudioPluginList", org_sflphone_SFLphone_ConfigurationManager_get_input_audio_plugin_list_async_callback, stuff, g_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_sflphone_SFLphone_ConfigurationManager_get_output_audio_plugin_list (DBusGProxy *proxy, char *** OUT_list, GError **error)

{
  return dbus_g_proxy_call (proxy, "getOutputAudioPluginList", error, G_TYPE_INVALID, G_TYPE_STRV, OUT_list, G_TYPE_INVALID);
}

typedef void (*org_sflphone_SFLphone_ConfigurationManager_get_output_audio_plugin_list_reply) (DBusGProxy *proxy, char * *OUT_list, GError *error, gpointer userdata);

static void
org_sflphone_SFLphone_ConfigurationManager_get_output_audio_plugin_list_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  char ** OUT_list;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_STRV, &OUT_list, G_TYPE_INVALID);
  (*(org_sflphone_SFLphone_ConfigurationManager_get_output_audio_plugin_list_reply)data->cb) (proxy, OUT_list, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_sflphone_SFLphone_ConfigurationManager_get_output_audio_plugin_list_async (DBusGProxy *proxy, org_sflphone_SFLphone_ConfigurationManager_get_output_audio_plugin_list_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "getOutputAudioPluginList", org_sflphone_SFLphone_ConfigurationManager_get_output_audio_plugin_list_async_callback, stuff, g_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_sflphone_SFLphone_ConfigurationManager_set_input_audio_plugin (DBusGProxy *proxy, const char * IN_audioPlugin, GError **error)

{
  return dbus_g_proxy_call (proxy, "setInputAudioPlugin", error, G_TYPE_STRING, IN_audioPlugin, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*org_sflphone_SFLphone_ConfigurationManager_set_input_audio_plugin_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_sflphone_SFLphone_ConfigurationManager_set_input_audio_plugin_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_sflphone_SFLphone_ConfigurationManager_set_input_audio_plugin_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_sflphone_SFLphone_ConfigurationManager_set_input_audio_plugin_async (DBusGProxy *proxy, const char * IN_audioPlugin, org_sflphone_SFLphone_ConfigurationManager_set_input_audio_plugin_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "setInputAudioPlugin", org_sflphone_SFLphone_ConfigurationManager_set_input_audio_plugin_async_callback, stuff, g_free, G_TYPE_STRING, IN_audioPlugin, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_sflphone_SFLphone_ConfigurationManager_set_output_audio_plugin (DBusGProxy *proxy, const char * IN_audioPlugin, GError **error)

{
  return dbus_g_proxy_call (proxy, "setOutputAudioPlugin", error, G_TYPE_STRING, IN_audioPlugin, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*org_sflphone_SFLphone_ConfigurationManager_set_output_audio_plugin_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_sflphone_SFLphone_ConfigurationManager_set_output_audio_plugin_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_sflphone_SFLphone_ConfigurationManager_set_output_audio_plugin_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_sflphone_SFLphone_ConfigurationManager_set_output_audio_plugin_async (DBusGProxy *proxy, const char * IN_audioPlugin, org_sflphone_SFLphone_ConfigurationManager_set_output_audio_plugin_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "setOutputAudioPlugin", org_sflphone_SFLphone_ConfigurationManager_set_output_audio_plugin_async_callback, stuff, g_free, G_TYPE_STRING, IN_audioPlugin, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_sflphone_SFLphone_ConfigurationManager_get_audio_output_device_list (DBusGProxy *proxy, char *** OUT_list, GError **error)

{
  return dbus_g_proxy_call (proxy, "getAudioOutputDeviceList", error, G_TYPE_INVALID, G_TYPE_STRV, OUT_list, G_TYPE_INVALID);
}

typedef void (*org_sflphone_SFLphone_ConfigurationManager_get_audio_output_device_list_reply) (DBusGProxy *proxy, char * *OUT_list, GError *error, gpointer userdata);

static void
org_sflphone_SFLphone_ConfigurationManager_get_audio_output_device_list_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  char ** OUT_list;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_STRV, &OUT_list, G_TYPE_INVALID);
  (*(org_sflphone_SFLphone_ConfigurationManager_get_audio_output_device_list_reply)data->cb) (proxy, OUT_list, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_sflphone_SFLphone_ConfigurationManager_get_audio_output_device_list_async (DBusGProxy *proxy, org_sflphone_SFLphone_ConfigurationManager_get_audio_output_device_list_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "getAudioOutputDeviceList", org_sflphone_SFLphone_ConfigurationManager_get_audio_output_device_list_async_callback, stuff, g_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_sflphone_SFLphone_ConfigurationManager_set_audio_output_device (DBusGProxy *proxy, const gint IN_index, GError **error)

{
  return dbus_g_proxy_call (proxy, "setAudioOutputDevice", error, G_TYPE_INT, IN_index, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*org_sflphone_SFLphone_ConfigurationManager_set_audio_output_device_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_sflphone_SFLphone_ConfigurationManager_set_audio_output_device_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_sflphone_SFLphone_ConfigurationManager_set_audio_output_device_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_sflphone_SFLphone_ConfigurationManager_set_audio_output_device_async (DBusGProxy *proxy, const gint IN_index, org_sflphone_SFLphone_ConfigurationManager_set_audio_output_device_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "setAudioOutputDevice", org_sflphone_SFLphone_ConfigurationManager_set_audio_output_device_async_callback, stuff, g_free, G_TYPE_INT, IN_index, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_sflphone_SFLphone_ConfigurationManager_get_audio_input_device_list (DBusGProxy *proxy, char *** OUT_list, GError **error)

{
  return dbus_g_proxy_call (proxy, "getAudioInputDeviceList", error, G_TYPE_INVALID, G_TYPE_STRV, OUT_list, G_TYPE_INVALID);
}

typedef void (*org_sflphone_SFLphone_ConfigurationManager_get_audio_input_device_list_reply) (DBusGProxy *proxy, char * *OUT_list, GError *error, gpointer userdata);

static void
org_sflphone_SFLphone_ConfigurationManager_get_audio_input_device_list_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  char ** OUT_list;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_STRV, &OUT_list, G_TYPE_INVALID);
  (*(org_sflphone_SFLphone_ConfigurationManager_get_audio_input_device_list_reply)data->cb) (proxy, OUT_list, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_sflphone_SFLphone_ConfigurationManager_get_audio_input_device_list_async (DBusGProxy *proxy, org_sflphone_SFLphone_ConfigurationManager_get_audio_input_device_list_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "getAudioInputDeviceList", org_sflphone_SFLphone_ConfigurationManager_get_audio_input_device_list_async_callback, stuff, g_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_sflphone_SFLphone_ConfigurationManager_set_audio_input_device (DBusGProxy *proxy, const gint IN_index, GError **error)

{
  return dbus_g_proxy_call (proxy, "setAudioInputDevice", error, G_TYPE_INT, IN_index, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*org_sflphone_SFLphone_ConfigurationManager_set_audio_input_device_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_sflphone_SFLphone_ConfigurationManager_set_audio_input_device_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_sflphone_SFLphone_ConfigurationManager_set_audio_input_device_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_sflphone_SFLphone_ConfigurationManager_set_audio_input_device_async (DBusGProxy *proxy, const gint IN_index, org_sflphone_SFLphone_ConfigurationManager_set_audio_input_device_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "setAudioInputDevice", org_sflphone_SFLphone_ConfigurationManager_set_audio_input_device_async_callback, stuff, g_free, G_TYPE_INT, IN_index, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_sflphone_SFLphone_ConfigurationManager_get_current_audio_devices_index (DBusGProxy *proxy, char *** OUT_list, GError **error)

{
  return dbus_g_proxy_call (proxy, "getCurrentAudioDevicesIndex", error, G_TYPE_INVALID, G_TYPE_STRV, OUT_list, G_TYPE_INVALID);
}

typedef void (*org_sflphone_SFLphone_ConfigurationManager_get_current_audio_devices_index_reply) (DBusGProxy *proxy, char * *OUT_list, GError *error, gpointer userdata);

static void
org_sflphone_SFLphone_ConfigurationManager_get_current_audio_devices_index_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  char ** OUT_list;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_STRV, &OUT_list, G_TYPE_INVALID);
  (*(org_sflphone_SFLphone_ConfigurationManager_get_current_audio_devices_index_reply)data->cb) (proxy, OUT_list, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_sflphone_SFLphone_ConfigurationManager_get_current_audio_devices_index_async (DBusGProxy *proxy, org_sflphone_SFLphone_ConfigurationManager_get_current_audio_devices_index_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "getCurrentAudioDevicesIndex", org_sflphone_SFLphone_ConfigurationManager_get_current_audio_devices_index_async_callback, stuff, g_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_sflphone_SFLphone_ConfigurationManager_get_audio_device_index (DBusGProxy *proxy, const char * IN_name, gint* OUT_index, GError **error)

{
  return dbus_g_proxy_call (proxy, "getAudioDeviceIndex", error, G_TYPE_STRING, IN_name, G_TYPE_INVALID, G_TYPE_INT, OUT_index, G_TYPE_INVALID);
}

typedef void (*org_sflphone_SFLphone_ConfigurationManager_get_audio_device_index_reply) (DBusGProxy *proxy, gint OUT_index, GError *error, gpointer userdata);

static void
org_sflphone_SFLphone_ConfigurationManager_get_audio_device_index_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  gint OUT_index;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INT, &OUT_index, G_TYPE_INVALID);
  (*(org_sflphone_SFLphone_ConfigurationManager_get_audio_device_index_reply)data->cb) (proxy, OUT_index, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_sflphone_SFLphone_ConfigurationManager_get_audio_device_index_async (DBusGProxy *proxy, const char * IN_name, org_sflphone_SFLphone_ConfigurationManager_get_audio_device_index_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "getAudioDeviceIndex", org_sflphone_SFLphone_ConfigurationManager_get_audio_device_index_async_callback, stuff, g_free, G_TYPE_STRING, IN_name, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_sflphone_SFLphone_ConfigurationManager_get_current_audio_output_plugin (DBusGProxy *proxy, char ** OUT_plugin, GError **error)

{
  return dbus_g_proxy_call (proxy, "getCurrentAudioOutputPlugin", error, G_TYPE_INVALID, G_TYPE_STRING, OUT_plugin, G_TYPE_INVALID);
}

typedef void (*org_sflphone_SFLphone_ConfigurationManager_get_current_audio_output_plugin_reply) (DBusGProxy *proxy, char * OUT_plugin, GError *error, gpointer userdata);

static void
org_sflphone_SFLphone_ConfigurationManager_get_current_audio_output_plugin_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  char * OUT_plugin;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_STRING, &OUT_plugin, G_TYPE_INVALID);
  (*(org_sflphone_SFLphone_ConfigurationManager_get_current_audio_output_plugin_reply)data->cb) (proxy, OUT_plugin, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_sflphone_SFLphone_ConfigurationManager_get_current_audio_output_plugin_async (DBusGProxy *proxy, org_sflphone_SFLphone_ConfigurationManager_get_current_audio_output_plugin_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "getCurrentAudioOutputPlugin", org_sflphone_SFLphone_ConfigurationManager_get_current_audio_output_plugin_async_callback, stuff, g_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_sflphone_SFLphone_ConfigurationManager_get_brightness (DBusGProxy *proxy, gint* OUT_minValue, gint* OUT_maxValue, gint* OUT_stepValue, gint* OUT_currentValue, GError **error)

{
  return dbus_g_proxy_call (proxy, "getBrightness", error, G_TYPE_INVALID, G_TYPE_INT, OUT_minValue, G_TYPE_INT, OUT_maxValue, G_TYPE_INT, OUT_stepValue, G_TYPE_INT, OUT_currentValue, G_TYPE_INVALID);
}

typedef void (*org_sflphone_SFLphone_ConfigurationManager_get_brightness_reply) (DBusGProxy *proxy, gint OUT_minValue, gint OUT_maxValue, gint OUT_stepValue, gint OUT_currentValue, GError *error, gpointer userdata);

static void
org_sflphone_SFLphone_ConfigurationManager_get_brightness_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  gint OUT_minValue;
  gint OUT_maxValue;
  gint OUT_stepValue;
  gint OUT_currentValue;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INT, &OUT_minValue, G_TYPE_INT, &OUT_maxValue, G_TYPE_INT, &OUT_stepValue, G_TYPE_INT, &OUT_currentValue, G_TYPE_INVALID);
  (*(org_sflphone_SFLphone_ConfigurationManager_get_brightness_reply)data->cb) (proxy, OUT_minValue, OUT_maxValue, OUT_stepValue, OUT_currentValue, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_sflphone_SFLphone_ConfigurationManager_get_brightness_async (DBusGProxy *proxy, org_sflphone_SFLphone_ConfigurationManager_get_brightness_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "getBrightness", org_sflphone_SFLphone_ConfigurationManager_get_brightness_async_callback, stuff, g_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_sflphone_SFLphone_ConfigurationManager_set_brightness (DBusGProxy *proxy, const gint IN_value, GError **error)

{
  return dbus_g_proxy_call (proxy, "setBrightness", error, G_TYPE_INT, IN_value, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*org_sflphone_SFLphone_ConfigurationManager_set_brightness_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_sflphone_SFLphone_ConfigurationManager_set_brightness_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_sflphone_SFLphone_ConfigurationManager_set_brightness_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_sflphone_SFLphone_ConfigurationManager_set_brightness_async (DBusGProxy *proxy, const gint IN_value, org_sflphone_SFLphone_ConfigurationManager_set_brightness_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "setBrightness", org_sflphone_SFLphone_ConfigurationManager_set_brightness_async_callback, stuff, g_free, G_TYPE_INT, IN_value, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_sflphone_SFLphone_ConfigurationManager_get_contrast (DBusGProxy *proxy, gint* OUT_minValue, gint* OUT_maxValue, gint* OUT_stepValue, gint* OUT_currentValue, GError **error)

{
  return dbus_g_proxy_call (proxy, "getContrast", error, G_TYPE_INVALID, G_TYPE_INT, OUT_minValue, G_TYPE_INT, OUT_maxValue, G_TYPE_INT, OUT_stepValue, G_TYPE_INT, OUT_currentValue, G_TYPE_INVALID);
}

typedef void (*org_sflphone_SFLphone_ConfigurationManager_get_contrast_reply) (DBusGProxy *proxy, gint OUT_minValue, gint OUT_maxValue, gint OUT_stepValue, gint OUT_currentValue, GError *error, gpointer userdata);

static void
org_sflphone_SFLphone_ConfigurationManager_get_contrast_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  gint OUT_minValue;
  gint OUT_maxValue;
  gint OUT_stepValue;
  gint OUT_currentValue;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INT, &OUT_minValue, G_TYPE_INT, &OUT_maxValue, G_TYPE_INT, &OUT_stepValue, G_TYPE_INT, &OUT_currentValue, G_TYPE_INVALID);
  (*(org_sflphone_SFLphone_ConfigurationManager_get_contrast_reply)data->cb) (proxy, OUT_minValue, OUT_maxValue, OUT_stepValue, OUT_currentValue, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_sflphone_SFLphone_ConfigurationManager_get_contrast_async (DBusGProxy *proxy, org_sflphone_SFLphone_ConfigurationManager_get_contrast_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "getContrast", org_sflphone_SFLphone_ConfigurationManager_get_contrast_async_callback, stuff, g_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_sflphone_SFLphone_ConfigurationManager_set_contrast (DBusGProxy *proxy, const gint IN_value, GError **error)

{
  return dbus_g_proxy_call (proxy, "setContrast", error, G_TYPE_INT, IN_value, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*org_sflphone_SFLphone_ConfigurationManager_set_contrast_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_sflphone_SFLphone_ConfigurationManager_set_contrast_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_sflphone_SFLphone_ConfigurationManager_set_contrast_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_sflphone_SFLphone_ConfigurationManager_set_contrast_async (DBusGProxy *proxy, const gint IN_value, org_sflphone_SFLphone_ConfigurationManager_set_contrast_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "setContrast", org_sflphone_SFLphone_ConfigurationManager_set_contrast_async_callback, stuff, g_free, G_TYPE_INT, IN_value, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_sflphone_SFLphone_ConfigurationManager_get_colour (DBusGProxy *proxy, gint* OUT_minValue, gint* OUT_maxValue, gint* OUT_stepValue, gint* OUT_currentValue, GError **error)

{
  return dbus_g_proxy_call (proxy, "getColour", error, G_TYPE_INVALID, G_TYPE_INT, OUT_minValue, G_TYPE_INT, OUT_maxValue, G_TYPE_INT, OUT_stepValue, G_TYPE_INT, OUT_currentValue, G_TYPE_INVALID);
}

typedef void (*org_sflphone_SFLphone_ConfigurationManager_get_colour_reply) (DBusGProxy *proxy, gint OUT_minValue, gint OUT_maxValue, gint OUT_stepValue, gint OUT_currentValue, GError *error, gpointer userdata);

static void
org_sflphone_SFLphone_ConfigurationManager_get_colour_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  gint OUT_minValue;
  gint OUT_maxValue;
  gint OUT_stepValue;
  gint OUT_currentValue;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INT, &OUT_minValue, G_TYPE_INT, &OUT_maxValue, G_TYPE_INT, &OUT_stepValue, G_TYPE_INT, &OUT_currentValue, G_TYPE_INVALID);
  (*(org_sflphone_SFLphone_ConfigurationManager_get_colour_reply)data->cb) (proxy, OUT_minValue, OUT_maxValue, OUT_stepValue, OUT_currentValue, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_sflphone_SFLphone_ConfigurationManager_get_colour_async (DBusGProxy *proxy, org_sflphone_SFLphone_ConfigurationManager_get_colour_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "getColour", org_sflphone_SFLphone_ConfigurationManager_get_colour_async_callback, stuff, g_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_sflphone_SFLphone_ConfigurationManager_set_colour (DBusGProxy *proxy, const gint IN_value, GError **error)

{
  return dbus_g_proxy_call (proxy, "setColour", error, G_TYPE_INT, IN_value, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*org_sflphone_SFLphone_ConfigurationManager_set_colour_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_sflphone_SFLphone_ConfigurationManager_set_colour_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_sflphone_SFLphone_ConfigurationManager_set_colour_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_sflphone_SFLphone_ConfigurationManager_set_colour_async (DBusGProxy *proxy, const gint IN_value, org_sflphone_SFLphone_ConfigurationManager_set_colour_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "setColour", org_sflphone_SFLphone_ConfigurationManager_set_colour_async_callback, stuff, g_free, G_TYPE_INT, IN_value, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_sflphone_SFLphone_ConfigurationManager_get_webcam_device_list (DBusGProxy *proxy, char *** OUT_list, GError **error)

{
  return dbus_g_proxy_call (proxy, "getWebcamDeviceList", error, G_TYPE_INVALID, G_TYPE_STRV, OUT_list, G_TYPE_INVALID);
}

typedef void (*org_sflphone_SFLphone_ConfigurationManager_get_webcam_device_list_reply) (DBusGProxy *proxy, char * *OUT_list, GError *error, gpointer userdata);

static void
org_sflphone_SFLphone_ConfigurationManager_get_webcam_device_list_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  char ** OUT_list;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_STRV, &OUT_list, G_TYPE_INVALID);
  (*(org_sflphone_SFLphone_ConfigurationManager_get_webcam_device_list_reply)data->cb) (proxy, OUT_list, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_sflphone_SFLphone_ConfigurationManager_get_webcam_device_list_async (DBusGProxy *proxy, org_sflphone_SFLphone_ConfigurationManager_get_webcam_device_list_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "getWebcamDeviceList", org_sflphone_SFLphone_ConfigurationManager_get_webcam_device_list_async_callback, stuff, g_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_sflphone_SFLphone_ConfigurationManager_set_webcam_device (DBusGProxy *proxy, const char * IN_name, GError **error)

{
  return dbus_g_proxy_call (proxy, "setWebcamDevice", error, G_TYPE_STRING, IN_name, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*org_sflphone_SFLphone_ConfigurationManager_set_webcam_device_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_sflphone_SFLphone_ConfigurationManager_set_webcam_device_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_sflphone_SFLphone_ConfigurationManager_set_webcam_device_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_sflphone_SFLphone_ConfigurationManager_set_webcam_device_async (DBusGProxy *proxy, const char * IN_name, org_sflphone_SFLphone_ConfigurationManager_set_webcam_device_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "setWebcamDevice", org_sflphone_SFLphone_ConfigurationManager_set_webcam_device_async_callback, stuff, g_free, G_TYPE_STRING, IN_name, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_sflphone_SFLphone_ConfigurationManager_get_resolution_list (DBusGProxy *proxy, char *** OUT_list, GError **error)

{
  return dbus_g_proxy_call (proxy, "getResolutionList", error, G_TYPE_INVALID, G_TYPE_STRV, OUT_list, G_TYPE_INVALID);
}

typedef void (*org_sflphone_SFLphone_ConfigurationManager_get_resolution_list_reply) (DBusGProxy *proxy, char * *OUT_list, GError *error, gpointer userdata);

static void
org_sflphone_SFLphone_ConfigurationManager_get_resolution_list_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  char ** OUT_list;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_STRV, &OUT_list, G_TYPE_INVALID);
  (*(org_sflphone_SFLphone_ConfigurationManager_get_resolution_list_reply)data->cb) (proxy, OUT_list, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_sflphone_SFLphone_ConfigurationManager_get_resolution_list_async (DBusGProxy *proxy, org_sflphone_SFLphone_ConfigurationManager_get_resolution_list_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "getResolutionList", org_sflphone_SFLphone_ConfigurationManager_get_resolution_list_async_callback, stuff, g_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_sflphone_SFLphone_ConfigurationManager_set_resolution (DBusGProxy *proxy, const char * IN_name, GError **error)

{
  return dbus_g_proxy_call (proxy, "setResolution", error, G_TYPE_STRING, IN_name, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*org_sflphone_SFLphone_ConfigurationManager_set_resolution_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_sflphone_SFLphone_ConfigurationManager_set_resolution_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_sflphone_SFLphone_ConfigurationManager_set_resolution_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_sflphone_SFLphone_ConfigurationManager_set_resolution_async (DBusGProxy *proxy, const char * IN_name, org_sflphone_SFLphone_ConfigurationManager_set_resolution_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "setResolution", org_sflphone_SFLphone_ConfigurationManager_set_resolution_async_callback, stuff, g_free, G_TYPE_STRING, IN_name, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_sflphone_SFLphone_ConfigurationManager_get_current_resolution (DBusGProxy *proxy, char ** OUT_name, GError **error)

{
  return dbus_g_proxy_call (proxy, "getCurrentResolution", error, G_TYPE_INVALID, G_TYPE_STRING, OUT_name, G_TYPE_INVALID);
}

typedef void (*org_sflphone_SFLphone_ConfigurationManager_get_current_resolution_reply) (DBusGProxy *proxy, char * OUT_name, GError *error, gpointer userdata);

static void
org_sflphone_SFLphone_ConfigurationManager_get_current_resolution_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  char * OUT_name;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_STRING, &OUT_name, G_TYPE_INVALID);
  (*(org_sflphone_SFLphone_ConfigurationManager_get_current_resolution_reply)data->cb) (proxy, OUT_name, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_sflphone_SFLphone_ConfigurationManager_get_current_resolution_async (DBusGProxy *proxy, org_sflphone_SFLphone_ConfigurationManager_get_current_resolution_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "getCurrentResolution", org_sflphone_SFLphone_ConfigurationManager_get_current_resolution_async_callback, stuff, g_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_sflphone_SFLphone_ConfigurationManager_enable_local_video_pref (DBusGProxy *proxy, gboolean* OUT_status, GError **error)

{
  return dbus_g_proxy_call (proxy, "enableLocalVideoPref", error, G_TYPE_INVALID, G_TYPE_BOOLEAN, OUT_status, G_TYPE_INVALID);
}

typedef void (*org_sflphone_SFLphone_ConfigurationManager_enable_local_video_pref_reply) (DBusGProxy *proxy, gboolean OUT_status, GError *error, gpointer userdata);

static void
org_sflphone_SFLphone_ConfigurationManager_enable_local_video_pref_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  gboolean OUT_status;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_BOOLEAN, &OUT_status, G_TYPE_INVALID);
  (*(org_sflphone_SFLphone_ConfigurationManager_enable_local_video_pref_reply)data->cb) (proxy, OUT_status, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_sflphone_SFLphone_ConfigurationManager_enable_local_video_pref_async (DBusGProxy *proxy, org_sflphone_SFLphone_ConfigurationManager_enable_local_video_pref_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "enableLocalVideoPref", org_sflphone_SFLphone_ConfigurationManager_enable_local_video_pref_async_callback, stuff, g_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_sflphone_SFLphone_ConfigurationManager_disable_local_video_pref (DBusGProxy *proxy, gboolean* OUT_status, GError **error)

{
  return dbus_g_proxy_call (proxy, "disableLocalVideoPref", error, G_TYPE_INVALID, G_TYPE_BOOLEAN, OUT_status, G_TYPE_INVALID);
}

typedef void (*org_sflphone_SFLphone_ConfigurationManager_disable_local_video_pref_reply) (DBusGProxy *proxy, gboolean OUT_status, GError *error, gpointer userdata);

static void
org_sflphone_SFLphone_ConfigurationManager_disable_local_video_pref_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  gboolean OUT_status;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_BOOLEAN, &OUT_status, G_TYPE_INVALID);
  (*(org_sflphone_SFLphone_ConfigurationManager_disable_local_video_pref_reply)data->cb) (proxy, OUT_status, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_sflphone_SFLphone_ConfigurationManager_disable_local_video_pref_async (DBusGProxy *proxy, org_sflphone_SFLphone_ConfigurationManager_disable_local_video_pref_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "disableLocalVideoPref", org_sflphone_SFLphone_ConfigurationManager_disable_local_video_pref_async_callback, stuff, g_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_sflphone_SFLphone_ConfigurationManager_get_bitrate_list (DBusGProxy *proxy, char *** OUT_list, GError **error)

{
  return dbus_g_proxy_call (proxy, "getBitrateList", error, G_TYPE_INVALID, G_TYPE_STRV, OUT_list, G_TYPE_INVALID);
}

typedef void (*org_sflphone_SFLphone_ConfigurationManager_get_bitrate_list_reply) (DBusGProxy *proxy, char * *OUT_list, GError *error, gpointer userdata);

static void
org_sflphone_SFLphone_ConfigurationManager_get_bitrate_list_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  char ** OUT_list;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_STRV, &OUT_list, G_TYPE_INVALID);
  (*(org_sflphone_SFLphone_ConfigurationManager_get_bitrate_list_reply)data->cb) (proxy, OUT_list, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_sflphone_SFLphone_ConfigurationManager_get_bitrate_list_async (DBusGProxy *proxy, org_sflphone_SFLphone_ConfigurationManager_get_bitrate_list_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "getBitrateList", org_sflphone_SFLphone_ConfigurationManager_get_bitrate_list_async_callback, stuff, g_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_sflphone_SFLphone_ConfigurationManager_set_bitrate (DBusGProxy *proxy, const char * IN_name, GError **error)

{
  return dbus_g_proxy_call (proxy, "setBitrate", error, G_TYPE_STRING, IN_name, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*org_sflphone_SFLphone_ConfigurationManager_set_bitrate_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_sflphone_SFLphone_ConfigurationManager_set_bitrate_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_sflphone_SFLphone_ConfigurationManager_set_bitrate_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_sflphone_SFLphone_ConfigurationManager_set_bitrate_async (DBusGProxy *proxy, const char * IN_name, org_sflphone_SFLphone_ConfigurationManager_set_bitrate_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "setBitrate", org_sflphone_SFLphone_ConfigurationManager_set_bitrate_async_callback, stuff, g_free, G_TYPE_STRING, IN_name, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_sflphone_SFLphone_ConfigurationManager_get_current_bitrate (DBusGProxy *proxy, char ** OUT_name, GError **error)

{
  return dbus_g_proxy_call (proxy, "getCurrentBitrate", error, G_TYPE_INVALID, G_TYPE_STRING, OUT_name, G_TYPE_INVALID);
}

typedef void (*org_sflphone_SFLphone_ConfigurationManager_get_current_bitrate_reply) (DBusGProxy *proxy, char * OUT_name, GError *error, gpointer userdata);

static void
org_sflphone_SFLphone_ConfigurationManager_get_current_bitrate_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  char * OUT_name;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_STRING, &OUT_name, G_TYPE_INVALID);
  (*(org_sflphone_SFLphone_ConfigurationManager_get_current_bitrate_reply)data->cb) (proxy, OUT_name, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_sflphone_SFLphone_ConfigurationManager_get_current_bitrate_async (DBusGProxy *proxy, org_sflphone_SFLphone_ConfigurationManager_get_current_bitrate_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "getCurrentBitrate", org_sflphone_SFLphone_ConfigurationManager_get_current_bitrate_async_callback, stuff, g_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_sflphone_SFLphone_ConfigurationManager_get_video_codec_list (DBusGProxy *proxy, char *** OUT_list, GError **error)

{
  return dbus_g_proxy_call (proxy, "getVideoCodecList", error, G_TYPE_INVALID, G_TYPE_STRV, OUT_list, G_TYPE_INVALID);
}

typedef void (*org_sflphone_SFLphone_ConfigurationManager_get_video_codec_list_reply) (DBusGProxy *proxy, char * *OUT_list, GError *error, gpointer userdata);

static void
org_sflphone_SFLphone_ConfigurationManager_get_video_codec_list_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  char ** OUT_list;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_STRV, &OUT_list, G_TYPE_INVALID);
  (*(org_sflphone_SFLphone_ConfigurationManager_get_video_codec_list_reply)data->cb) (proxy, OUT_list, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_sflphone_SFLphone_ConfigurationManager_get_video_codec_list_async (DBusGProxy *proxy, org_sflphone_SFLphone_ConfigurationManager_get_video_codec_list_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "getVideoCodecList", org_sflphone_SFLphone_ConfigurationManager_get_video_codec_list_async_callback, stuff, g_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_sflphone_SFLphone_ConfigurationManager_get_active_video_codec_list (DBusGProxy *proxy, char *** OUT_list, GError **error)

{
  return dbus_g_proxy_call (proxy, "getActiveVideoCodecList", error, G_TYPE_INVALID, G_TYPE_STRV, OUT_list, G_TYPE_INVALID);
}

typedef void (*org_sflphone_SFLphone_ConfigurationManager_get_active_video_codec_list_reply) (DBusGProxy *proxy, char * *OUT_list, GError *error, gpointer userdata);

static void
org_sflphone_SFLphone_ConfigurationManager_get_active_video_codec_list_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  char ** OUT_list;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_STRV, &OUT_list, G_TYPE_INVALID);
  (*(org_sflphone_SFLphone_ConfigurationManager_get_active_video_codec_list_reply)data->cb) (proxy, OUT_list, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_sflphone_SFLphone_ConfigurationManager_get_active_video_codec_list_async (DBusGProxy *proxy, org_sflphone_SFLphone_ConfigurationManager_get_active_video_codec_list_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "getActiveVideoCodecList", org_sflphone_SFLphone_ConfigurationManager_get_active_video_codec_list_async_callback, stuff, g_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_sflphone_SFLphone_ConfigurationManager_set_active_video_codec_list (DBusGProxy *proxy, const char ** IN_list, GError **error)

{
  return dbus_g_proxy_call (proxy, "setActiveVideoCodecList", error, G_TYPE_STRV, IN_list, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*org_sflphone_SFLphone_ConfigurationManager_set_active_video_codec_list_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_sflphone_SFLphone_ConfigurationManager_set_active_video_codec_list_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_sflphone_SFLphone_ConfigurationManager_set_active_video_codec_list_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_sflphone_SFLphone_ConfigurationManager_set_active_video_codec_list_async (DBusGProxy *proxy, const char ** IN_list, org_sflphone_SFLphone_ConfigurationManager_set_active_video_codec_list_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "setActiveVideoCodecList", org_sflphone_SFLphone_ConfigurationManager_set_active_video_codec_list_async_callback, stuff, g_free, G_TYPE_STRV, IN_list, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_sflphone_SFLphone_ConfigurationManager_is_iax2_enabled (DBusGProxy *proxy, gint* OUT_res, GError **error)

{
  return dbus_g_proxy_call (proxy, "isIax2Enabled", error, G_TYPE_INVALID, G_TYPE_INT, OUT_res, G_TYPE_INVALID);
}

typedef void (*org_sflphone_SFLphone_ConfigurationManager_is_iax2_enabled_reply) (DBusGProxy *proxy, gint OUT_res, GError *error, gpointer userdata);

static void
org_sflphone_SFLphone_ConfigurationManager_is_iax2_enabled_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  gint OUT_res;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INT, &OUT_res, G_TYPE_INVALID);
  (*(org_sflphone_SFLphone_ConfigurationManager_is_iax2_enabled_reply)data->cb) (proxy, OUT_res, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_sflphone_SFLphone_ConfigurationManager_is_iax2_enabled_async (DBusGProxy *proxy, org_sflphone_SFLphone_ConfigurationManager_is_iax2_enabled_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "isIax2Enabled", org_sflphone_SFLphone_ConfigurationManager_is_iax2_enabled_async_callback, stuff, g_free, G_TYPE_INVALID);
}
#endif /* defined DBUS_GLIB_CLIENT_WRAPPERS_org_sflphone_SFLphone_ConfigurationManager */

G_END_DECLS
