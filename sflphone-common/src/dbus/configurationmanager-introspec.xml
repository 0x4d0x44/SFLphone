<?xml version="1.0" ?>

<node name="/configurationmanager-introspec" xmlns:tp="http://telepathy.freedesktop.org/wiki/DbusSpec#extensions-v0">
	<interface name="org.sflphone.SFLphone.ConfigurationManager">

		<tp:docstring xmlns="http://www.w3.org/1999/xhtml">
		</tp:docstring>

		<method name="getAccountDetails" tp:name-for-bindings="getAccountDetails">
			<!--* Method that returns a hashtable containing the current
			account configuration setting.

		CONFIG_ACCOUNT_ENABLE
		CONFIG_ACCOUNT_RESOLVE_ONCE
		CONFIG_ACCOUNT_TYPE
		HOSTNAME
		USERNAME
		PASSWORD
		REALM
		AUTHENTICATION_USERNAME
		CONFIG_ACCOUNT_MAILBOX
		CONFIG_ACCOUNT_REGISTRATION_EXPIRE
		LOCAL_INTERFACE
		PUBLISHED_SAMEAS_LOCAL
		PUBLISHED_ADDRESS
		LOCAL_PORT
		PUBLISHED_PORT
		DISPLAY_NAME
		STUN_ENABLE
		STUN_SERVER

		REGISTRATION_STATUS
		REGISTRATION_STATE_CODE
		REGISTRATION_STATE_DESCRIPTION
		SRTP_KEY_EXCHANGE
		SRTP_ENABLE

		SRTP_RTP_FALLBACK
		ZRTP_DISPLAY_SAS
		ZRTP_DISPLAY_SAS_ONCE
		ZRTP_HELLO_HASH
		ZRTP_NOT_SUPP_WARNING

		TLS_LISTENER_PORT
		TLS_ENABLE
		TLS_CA_LIST_FILE
		TLS_CERTIFICATE_FILE
		TLS_PRIVATE_KEY_FILE

		TLS_METHOD
		TLS_CIPHERS
		TLS_SERVER_NAME
		TLS_VERIFY_SERVER
		TLS_VERIFY_CLIENT
		TLS_REQUIRE_CLIENT_CERTIFICATE
		TLS_NEGOTIATION_TIMEOUT_SEC
		TLS_NEGOTIATION_TIMEOUT_MSEC


			@param[in] input accountID
			@param[out] output details
		-->
	  <arg type="s" name="accountID" direction="in"/>
	  <annotation name="com.trolltech.QtDBus.QtTypeName.Out0" value="MapStringString"/>
	  <arg type="a{ss}" name="details" direction="out"/>
  </method>

  <method name="setAccountDetails" tp:name-for-bindings="setAccountDetails">
	  <!--* Modify the current accout parameter settings given an
			accountID and a hash table containing the parameters to
			update. The hash table is not required to be complete,
			only the parameter to change may be specified. Only the
			running parameters are updated dynamically, configuration
			settings are stored in the configuration file when
			SFLphone-daemon quit.

		For a complete list of account settings refer to getAccountDetails

			@param[in] input accountID
			@param[in] input details
		-->
	  <annotation name="com.trolltech.QtDBus.QtTypeName.In1" value="MapStringString"/>
	  <arg type="s" name="accountID" direction="in"/>
	  <arg type="a{ss}" name="details" direction="in"/>
  </method>

  <method name="setCredential" tp:name-for-bindings="setCredential">
	  <arg type="s" name="accountID" direction="in"/>
	  <arg type="i" name="index" direction="in"/>
	  <arg type="a{ss}" name="credentialInformation" direction="in"/>
  </method>

  <method name="setNumberOfCredential" tp:name-for-bindings="setNumberOfCredential">
	  <arg type="s" name="accountID" direction="in"/>
	  <arg type="i" name="number" direction="in"/>
  </method>

  <method name="deleteAllCredential" tp:name-for-bindings="deleteAllCredential">
	  <arg type="s" name="accountID" direction="in"/>
  </method>

  <method name="getIp2IpDetails" tp:name-for-bindings="getIp2IpDetails">
	  <!--* Specific call to get configuration settings of the
		IP2IP_PROFILE. Which are sligthly different since no VoIP
		Account parameters are envolved.

		ACCOUNT_ID
		SRTP_KEY_EXCHANGE
		SRTP_ENABLE
		SRTP_RTP_FALLBACK
		ZRTP_DISPLAY_SAS
		ZRTP_HELLO_HASH
		ZRTP_NOT_SUPP_WARNING
		ZRTP_DISPLAY_SAS_ONCE
		LOCAL_INTERFACE
		LOCAL_PORT

		TLS_LISTENER_PORT
		TLS_CA_LIST_FILE
		TLS_CERTIFICATE_FILE
		TLS_PRIVATE_KEY_FILE
		TLS_PASSWORD
		TLS_METHOD
		TLS_CIPHERS
		TLS_SERVER_NAME
		TLS_VERIFY_SERVER
		TLS_VERIFY_CLIENT
		TLS_REQUIRE_CLIENT_CERTIFICATE
		TLS_NEGOTIATION_TIMEOUT_SEC
		TLS_NEGOTIATION_TIMEOUT_MSEC

			@param[in] input accountID
			@param[out] output details
		-->
	  <arg type="a{ss}" name="details" direction="out"/>
  </method>

  <method name="setIp2IpDetails" tp:name-for-bindings="setIp2IpDetails">
	  <!--* Modify the IP2IP_PROFILE parameter settings a hash table 
		containing the parameters to update. The hash table is not required to be complete,
			only the parameters to be modified may be specified. Also,
		only the running configuration is updated dynamically, 
			settings are stored in the configuration file when
			SFLphone-daemon quit.

		For a complete list of account settings refer to getAccountDetails

			@param[in] input accountID
			@param[in] input details
		-->
	  <arg type="a{ss}" name="details" direction="in"/>
  </method>

  <method name="getCredential" tp:name-for-bindings="getCredential">
	  <arg type="s" name="accountID" direction="in"/>
	  <arg type="i" name="index" direction="in"/>
	  <arg type="a{ss}" name="credentialInformation" direction="out"/>
  </method>

  <method name="getNumberOfCredential" tp:name-for-bindings="getNumberOfCredential">
	  <arg type="s" name="accountID" direction="in"/>
	  <arg type="i" name="numberOfCredential" direction="out"/>
  </method>

  <method name="addAccount" tp:name-for-bindings="addAccount">
	  <!--* Add a new account to the SFLphone-daemon list. If no
		details are specified, default parameters are used.
		A REGISTER is automatically sent and configuration is
		saved if account created successfully.

			@param[in] input details
			@param[out] output accountID
		-->
	  <annotation name="com.trolltech.QtDBus.QtTypeName.In0" value="MapStringString"/>
	  <arg type="a{ss}" name="details" direction="in"/>
	  <arg type="s" name="createdAccountId" direction="out"/>
  </method>

  <method name="setAccountsOrder" tp:name-for-bindings="setAccountsOrder">
	  <!--* Update the account list given a new list of accountID. If no account is specified
		for a call, the first one in the list will be used.

			@param[in] input order
		-->
	  <arg type="s" name="order" direction="in"/>
  </method>

  <method name="removeAccount" tp:name-for-bindings="removeAccount">
	  <!--* Delete an account from SFLphone-daemon list and erase
		account parameters from configuration file. 

			@param[in] input accountID
		-->
	  <arg type="s" name="accoundID" direction="in"/>
  </method>

  <method name="getAccountList" tp:name-for-bindings="getAccountList">
	  <!--* Get teh accountlist as stored in SFLphone-daemon.

			@param[in] input accountID
		-->
	  <annotation name="com.trolltech.QtDBus.QtTypeName.Out0" value="VectorString"/>
	  <arg type="as" name="list" direction="out"/>
  </method>

  <method name="sendRegister" tp:name-for-bindings="sendRegister">
	  <!--* Send accout registration request to PBX server. Register
		the account if expire=1, unregister if expire=0.

			@param[in] input accountID
		-->
	  <arg type="s" name="accountID" direction="in"/>
	  <arg type="i" name="expire" direction="in"/>
  </method>

  <!--      ///////////////////////               -->

  <!-- Various audio-related methods   -->

  <method name="getToneLocaleList" tp:name-for-bindings="getToneLocaleList">
	  <annotation name="com.trolltech.QtDBus.QtTypeName.Out0" value="VectorString"/>
	  <arg type="as" name="list" direction="out"/>
  </method>

  <method name="getVersion" tp:name-for-bindings="getVersion">
	  <arg type="s" name="version" direction="out"/>
  </method>

  <method name="getRingtoneList" tp:name-for-bindings="getRingtoneList">
	  <annotation name="com.trolltech.QtDBus.QtTypeName.Out0" value="VectorString"/>
	  <arg type="as" name="list" direction="out"/>
  </method>

  <method name="getPlaybackDeviceList" tp:name-for-bindings="getPlaybackDeviceList">
	  <annotation name="com.trolltech.QtDBus.QtTypeName.Out0" value="VectorString"/>
	  <arg type="as" name="list" direction="out"/>
  </method>

  <method name="getRecordDeviceList" tp:name-for-bindings="getRecordDeviceList">
	  <annotation name="com.trolltech.QtDBus.QtTypeName.Out0" value="VectorString"/>
	  <arg type="as" name="list" direction="out"/>
  </method>

  <method name="isRingtoneEnabled" tp:name-for-bindings="isRingtoneEnabled">
	  <arg type="i" name="bool" direction="out"/>
  </method>

  <method name="ringtoneEnabled" tp:name-for-bindings="ringtoneEnabled">
  </method>

  <method name="getRingtoneChoice" tp:name-for-bindings="getRingtoneChoice">
	  <arg type="s" name="tone" direction="out"/>
  </method>

  <method name="setRingtoneChoice" tp:name-for-bindings="setRingtoneChoice">
	  <arg type="s" name="tone" direction="in"/>
  </method>

  <method name="getAudioManager" tp:name-for-bindings="getAudioManager">
	  <arg type="i" name="api" direction="out"/>
  </method>

  <method name="setAudioManager" tp:name-for-bindings="setAudioManager">
	  <arg type="i" name="api" direction="in"/>
  </method>

  <method name="getRecordPath" tp:name-for-bindings="getRecordPath">
	  <arg type="s" name="rec" direction="out"/>
  </method>

  <method name="setRecordPath" tp:name-for-bindings="setRecordPath">
	  <arg type="s" name="rec" direction="in"/>
  </method>

  <!--      ///////////////////////               -->

  <!-- Codecs-related methods -->

  <method name="getCodecList" tp:name-for-bindings="getCodecList">
	  <annotation name="com.trolltech.QtDBus.QtTypeName.Out0" value="VectorString"/>
	  <arg type="as" name="list" direction="out"/>
  </method>

  <method name="getCodecDetails" tp:name-for-bindings="getCodecDetails">
	  <arg type="i" name="payload" direction="in"/>
	  <annotation name="com.trolltech.QtDBus.QtTypeName.Out0" value="VectorString"/>
	  <arg type="as" name="details" direction="out"/>
  </method>

  <method name="getActiveCodecList" tp:name-for-bindings="getActiveCodecList">
	  <annotation name="com.trolltech.QtDBus.QtTypeName.Out0" value="VectorString"/>
	  <arg type="s" name="accountID" direction="in"/>
	  <arg type="as" name="list" direction="out"/>
  </method>

  <method name="setActiveCodecList" tp:name-for-bindings="setActiveCodecList">
	  <annotation name="com.trolltech.QtDBus.QtTypeName.In0" value="VectorString"/>
	  <arg type="as" name="list" direction="in"/>
	  <arg type="s" name="accountID" direction="in"/>
  </method>


  <!-- Audio devices methods -->

  <method name="getInputAudioPluginList" tp:name-for-bindings="getInputAudioPluginList">
	  <annotation name="com.trolltech.QtDBus.QtTypeName.Out0" value="VectorString"/>
	  <arg type="as" name="list" direction="out"/>
  </method>

  <method name="getOutputAudioPluginList" tp:name-for-bindings="getOutputAudioPluginList">
	  <annotation name="com.trolltech.QtDBus.QtTypeName.Out0" value="VectorString"/>
	  <arg type="as" name="list" direction="out"/>
  </method>

  <method name="setInputAudioPlugin" tp:name-for-bindings="setInputAudioPlugin">
	  <arg type="s" name="audioPlugin" direction="in"/>
  </method>

  <method name="setOutputAudioPlugin" tp:name-for-bindings="setOutputAudioPlugin">
	  <arg type="s" name="audioPlugin" direction="in"/>
  </method>

  <method name="getAudioOutputDeviceList" tp:name-for-bindings="getAudioOutputDeviceList">
	  <annotation name="com.trolltech.QtDBus.QtTypeName.Out0" value="VectorString"/>
	  <arg type="as" name="list" direction="out"/>
  </method>

  <method name="setAudioOutputDevice" tp:name-for-bindings="setAudioOutputDevice">
	  <arg type="i" name="index" direction="in"/>
  </method>

  <method name="getAudioInputDeviceList" tp:name-for-bindings="getAudioInputDeviceList">
	  <annotation name="com.trolltech.QtDBus.QtTypeName.Out0" value="VectorString"/>
	  <arg type="as" name="list" direction="out"/>
  </method>

  <method name="setAudioInputDevice" tp:name-for-bindings="setAudioInputDevice">
	  <arg type="i" name="index" direction="in"/>
  </method>

  <method name="getCurrentAudioDevicesIndex" tp:name-for-bindings="getCurrentAudioDevicesIndex">
	  <annotation name="com.trolltech.QtDBus.QtTypeName.Out0" value="VectorString"/>
	  <arg type="as" name="list" direction="out"/>
  </method>

  <method name="getAudioDeviceIndex" tp:name-for-bindings="getAudioDeviceIndex">
	  <arg type="s" name="name" direction="in"/>
	  <arg type="i" name="index" direction="out"/>
  </method>

  <method name="getCurrentAudioOutputPlugin" tp:name-for-bindings="getCurrentAudioOutputPlugin">
	  <arg type="s" name="plugin" direction="out"/>
  </method>

  <!--    General Settings Panel         -->

  <method name="isMd5CredentialHashing" tp:name-for-bindings="isMd5CredentialHashing">
	  <arg type="b" name="res" direction="out"/>
  </method>

  <method name="setMd5CredentialHashing" tp:name-for-bindings="setMd5CredentialHashing">
	  <arg type="b" name="enabled" direction="in"/>
  </method>

  <method name="isIax2Enabled" tp:name-for-bindings="isIax2Enabled">
	  <arg type="i" name="res" direction="out"/>
  </method>

  <method name="setNotify" tp:name-for-bindings="setNotify">
  </method>

  <method name="getNotify" tp:name-for-bindings="getNotify">
	  <arg type="i" name="level" direction="out"/>
  </method>

  <method name="setMailNotify" tp:name-for-bindings="setMailNotify">
  </method>

  <method name="getMailNotify" tp:name-for-bindings="getMailNotify">
	  <arg type="i" name="level" direction="out"/>
  </method>

  <method name="getDialpad" tp:name-for-bindings="getDialpad">
	  <arg type="i" name="state" direction="out"/>
  </method>

  <method name="setDialpad" tp:name-for-bindings="setDialpad">
	  <arg type="b" name="display" direction="in"/>
  </method>

  <method name="getSearchbar" tp:name-for-bindings="getSearchbar">
	  <arg type="i" name="state" direction="out"/>
  </method>

  <method name="setSearchbar" tp:name-for-bindings="setSearchbar">
  </method>

  <method name="setHistoryEnabled" tp:name-for-bindings="setHistoryEnabled">
  </method>

  <method name="getHistoryEnabled" tp:name-for-bindings="getHistoryEnabled">
	  <arg type="s" name="state" direction="out"/>
  </method>

  <method name="getVolumeControls" tp:name-for-bindings="getVolumeControls">
	  <arg type="i" name="state" direction="out"/>
  </method>

  <method name="setVolumeControls" tp:name-for-bindings="setVolumeControls">
	  <arg type="b" name="display" direction="in"/>
  </method>

  <method name="getHistoryLimit" tp:name-for-bindings="getHistoryLimit">
	  <arg type="i" name="days" direction="out"/>
  </method>

  <method name="setHistoryLimit" tp:name-for-bindings="setHistoryLimit">
	  <arg type="i" name="days" direction="in"/>
  </method>

  <method name="startHidden" tp:name-for-bindings="startHidden">
  </method>

  <method name="isStartHidden" tp:name-for-bindings="isStartHidden">
	  <arg type="i" name="state" direction="out"/>
  </method>

  <method name="popupMode" tp:name-for-bindings="popupMode">
	  <arg type="i" name="state" direction="out"/>
  </method>

  <method name="switchPopupMode" tp:name-for-bindings="switchPopupMode">
  </method>

  <method name="getWindowWidth" tp:name-for-bindings="getWindowWidth">
	  <arg type="i" name="width" direction="out"/>
  </method>

  <method name="getWindowHeight" tp:name-for-bindings="getWindowHeight">
	  <arg type="i" name="height" direction="out"/>
  </method>

  <method name="setWindowWidth" tp:name-for-bindings="setWindowWidth">
	  <arg type="i" name="width" direction="in"/>
  </method>

  <method name="setWindowHeight" tp:name-for-bindings="setWindowHeight">
	  <arg type="i" name="height" direction="in"/>
  </method>

  <method name="getWindowPositionX" tp:name-for-bindings="getWindowPositionX">
	  <arg type="i" name="posX" direction="out"/>
  </method>

  <method name="setWindowPositionX" tp:name-for-bindings="setWindowPositionX">
	  <arg type="i" name="posX" direction="in"/>
  </method>

  <method name="getWindowPositionY" tp:name-for-bindings="getWindowPositionY">
	  <arg type="i" name="posY" direction="out"/>
  </method>

  <method name="setWindowPositionY" tp:name-for-bindings="setWindowPositionY">
	  <arg type="i" name="posY" direction="in"/>
  </method>

  <method name="enableStatusIcon" tp:name-for-bindings="enableStatusIcon">
	  <arg type="s" name="value" direction="in"/>
  </method>

  <method name="isStatusIconEnabled" tp:name-for-bindings="isStatusIconEnabled">
	  <arg type="s" name="value" direction="out"/>
  </method>


  <!-- Addressbook configuration -->
  <method name="getAddressbookSettings" tp:name-for-bindings="getAddressbookSettings">
	  <annotation name="com.trolltech.QtDBus.QtTypeName.Out0" value="MapStringInt"/>
	  <arg type="a{si}" name="settings" direction="out"/>
  </method>

  <method name="setAddressbookSettings" tp:name-for-bindings="setAddressbookSettings">
	  <annotation name="com.trolltech.QtDBus.QtTypeName.In0" value="MapStringInt"/>
	  <arg type="a{si}" name="settings" direction="in"/>
  </method>

  <!-- Addressbook list -->
  <method name="getAddressbookList" tp:name-for-bindings="getAddressbookList">
	  <annotation name="com.trolltech.QtDBus.QtTypeName.Out0" value="VectorString"/>
	  <arg type="as" name="settings" direction="out"/>
  </method>

  <method name="setAddressbookList" tp:name-for-bindings="setAddressbookList">
	  <annotation name="com.trolltech.QtDBus.QtTypeName.In0" value="VectorString"/>
	  <arg type="as" name="settings" direction="in"/>
  </method>

  <!-- Hook configuration -->
  <method name="getHookSettings" tp:name-for-bindings="getHookSettings">
	  <annotation name="com.trolltech.QtDBus.QtTypeName.Out0" value="MapStringString"/>
	  <arg type="a{ss}" name="settings" direction="out"/>
  </method>

  <method name="setHookSettings" tp:name-for-bindings="setHookSettings">
	  <annotation name="com.trolltech.QtDBus.QtTypeName.In0" value="MapStringString"/>
	  <arg type="a{ss}" name="settings" direction="in"/>
  </method>

  <method name="getHistory" tp:name-for-bindings="getHistory">
	  <annotation name="com.trolltech.QtDBus.QtTypeName.Out0" value="MapStringString"/>
	  <arg type="a{ss}" name="entries" direction="out"/>
  </method>

  <method name="setHistory" tp:name-for-bindings="setHistory">
	  <annotation name="com.trolltech.QtDBus.QtTypeName.In0" value="MapStringString"/>
	  <arg type="a{ss}" name="entries" direction="in"/>
  </method>

  <signal name="accountsChanged" tp:name-for-bindings="accountsChanged">
  </signal>  

  <signal name="errorAlert" tp:name-for-bindings="errorAlert">
	  <arg type="i" name="code"/>
  </signal> 

  <!-- TLS Methods -->
  <method name="getSupportedTlsMethod" tp:name-for-bindings="getSupportedTlsMethod">
	  <annotation name="com.trolltech.QtDBus.QtTypeName.Out0" value="VectorString"/>
	  <arg type="as" name="list" direction="out"/>
  </method>

  <method name="getTlsSettingsDefault" tp:name-for-bindings="getTlsSettingsDefault">
	  <arg type="a{ss}" name="details" direction="out"/>
  </method>

  <method name="getTlsSettings" tp:name-for-bindings="getTlsSettings">
	  <arg type="s" name="accountID" direction="in"/>
	  <annotation name="com.trolltech.QtDBus.QtTypeName.Out0" value="MapStringString"/>
	  <arg type="a{ss}" name="details" direction="out"/>
  </method>

  <method name="setTlsSettings" tp:name-for-bindings="setTlsSettings">
	  <annotation name="com.trolltech.QtDBus.QtTypeName.In1" value="MapStringString"/>
	  <arg type="s" name="accountID" direction="in"/>
	  <arg type="a{ss}" name="details" direction="in"/>
  </method>

  <method name="getAddrFromInterfaceName" tp:name-for-bindings="getAddrFromInterfaceName">
	  <arg type="s" name="interface" direction="in"/>
	  <arg type="s" name="address" direction="out"/>
  </method>

  <method name="getAllIpInterface" tp:name-for-bindings="getAllIpInterface">
	  <annotation name="com.trolltech.QtDBus.QtTypeName.Out0" value="VectorString"/>
	  <arg type="as" name="list" direction="out"/>
  </method>

  <method name="getAllIpInterfaceByName" tp:name-for-bindings="getAllIpInterfaceByName">
	  <annotation name="com.trolltech.QtDBus.QtTypeName.Out0" value="VectorString"/>
	  <arg type="as" name="list" direction="out"/>
  </method>

  <method name="getShortcuts" tp:name-for-bindings="getShortcuts">
	  <arg type="a{si}" name="shortcutsMap" direction="out"/>
  </method>

  <method name="setShortcuts" tp:name-for-bindings="setShortcuts">
	  <arg type="a{si}" name="shortcutsMap" direction="in"/>
  </method>
  </interface>
</node>
