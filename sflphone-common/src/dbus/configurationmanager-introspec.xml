<?xml version="1.0" ?>
<node name="/org/sflphone/SFLphone">
  <interface name="org.sflphone.SFLphone.ConfigurationManager">
    
  <!-- Accounts-related methods -->  
    <method name="getAccountDetails">
      <!--* Method that returns a hashtable containing the current
            account configuration setting.

	    CONFIG_ACCOUNT_ENABLE
	    CONFIG_ACCOUNT_RESOLVE_ONCE
	    CONFIG_ACCOUNT_TYPE
	    HOSTNAME
	    USERNAME
	    PASSWORD
	    REALM
	    AUTHENTICATION_USERNAME
	    CONFIG_ACCOUNT_MAILBOX
	    CONFIG_ACCOUNT_REGISTRATION_EXPIRE
	    LOCAL_INTERFACE
	    PUBLISHED_SAMEAS_LOCAL
	    PUBLISHED_ADDRESS
	    LOCAL_PORT
	    PUBLISHED_PORT
	    DISPLAY_NAME
	    STUN_ENABLE
	    STUN_SERVER

	    REGISTRATION_STATUS
	    REGISTRATION_STATE_CODE
	    REGISTRATION_STATE_DESCRIPTION
	    SRTP_KEY_EXCHANGE
	    SRTP_ENABLE
	    
	    SRTP_RTP_FALLBACK
	    ZRTP_DISPLAY_SAS
	    ZRTP_DISPLAY_SAS_ONCE
	    ZRTP_HELLO_HASH
	    ZRTP_NOT_SUPP_WARNING

	    TLS_LISTENER_PORT
	    TLS_ENABLE
	    TLS_CA_LIST_FILE
	    TLS_CERTIFICATE_FILE
	    TLS_PRIVATE_KEY_FILE
	    
	    TLS_METHOD
	    TLS_CIPHERS
	    TLS_SERVER_NAME
	    TLS_VERIFY_SERVER
	    TLS_VERIFY_CLIENT
	    TLS_REQUIRE_CLIENT_CERTIFICATE
	    TLS_NEGOTIATION_TIMEOUT_SEC
	    TLS_NEGOTIATION_TIMEOUT_MSEC


            @param[in] input accountID
            @param[out] output details
        -->
      <arg type="s" name="accountID" direction="in"/>
      <annotation name="com.trolltech.QtDBus.QtTypeName.Out0" value="MapStringString"/>
      <arg type="a{ss}" name="details" direction="out"/>
    </method>
    
    <method name="setAccountDetails">
      <!--* Modify the current accout parameter settings given an
            accountID and a hash table containing the parameters to
            update. The hash table is not required to be complete,
            only the parameter to change may be specified. Only the
            running parameters are updated dynamically, configuration
            settings are stored in the configuration file when
            SFLphone-daemon quit.

	    For a complete list of account settings refer to getAccountDetails

            @param[in] input accountID
            @param[in] input details
        -->
      <annotation name="com.trolltech.QtDBus.QtTypeName.In1" value="MapStringString"/>
      <arg type="s" name="accountID" direction="in"/>
      <arg type="a{ss}" name="details" direction="in"/>
    </method>
    
    <method name="setCredential">
      <arg type="s" name="accountID" direction="in"/>
      <arg type="i" name="index" direction="in"/>
      <arg type="a{ss}" name="credentialInformation" direction="in"/>
    </method>

    <method name="setNumberOfCredential">
      <arg type="s" name="accountID" direction="in"/>
      <arg type="i" name="number" direction="in"/>
    </method>
       
    <method name="deleteAllCredential">
       <arg type="s" name="accountID" direction="in"/>
    </method>
  
    <method name="getIp2IpDetails">
      <!--* Specific call to get configuration settings of the
	    IP2IP_PROFILE. Which are sligthly different since no VoIP
	    Account parameters are envolved.

	    ACCOUNT_ID
	    SRTP_KEY_EXCHANGE
	    SRTP_ENABLE
	    SRTP_RTP_FALLBACK
	    ZRTP_DISPLAY_SAS
	    ZRTP_HELLO_HASH
	    ZRTP_NOT_SUPP_WARNING
	    ZRTP_DISPLAY_SAS_ONCE
	    LOCAL_INTERFACE
	    LOCAL_PORT

	    TLS_LISTENER_PORT
	    TLS_CA_LIST_FILE
	    TLS_CERTIFICATE_FILE
	    TLS_PRIVATE_KEY_FILE
	    TLS_PASSWORD
	    TLS_METHOD
	    TLS_CIPHERS
	    TLS_SERVER_NAME
	    TLS_VERIFY_SERVER
	    TLS_VERIFY_CLIENT
	    TLS_REQUIRE_CLIENT_CERTIFICATE
	    TLS_NEGOTIATION_TIMEOUT_SEC
	    TLS_NEGOTIATION_TIMEOUT_MSEC

            @param[in] input accountID
            @param[out] output details
        -->
      <arg type="a{ss}" name="details" direction="out"/>
    </method>
    
    <method name="setIp2IpDetails">
      <!--* Modify the IP2IP_PROFILE parameter settings a hash table 
	    containing the parameters to update. The hash table is not required to be complete,
            only the parameters to be modified may be specified. Also,
	    only the running configuration is updated dynamically, 
            settings are stored in the configuration file when
            SFLphone-daemon quit.

	    For a complete list of account settings refer to getAccountDetails

            @param[in] input accountID
            @param[in] input details
        -->
      <arg type="a{ss}" name="details" direction="in"/>
    </method>
      
    <method name="getCredential">
      <arg type="s" name="accountID" direction="in"/>
      <arg type="i" name="index" direction="in"/>
      <arg type="a{ss}" name="credentialInformation" direction="out"/>
    </method>
    
    <method name="getNumberOfCredential">
      <arg type="s" name="accountID" direction="in"/>
      <arg type="i" name="numberOfCredential" direction="out"/>
    </method>
        
    <method name="addAccount">
      <!--* Add a new account to the SFLphone-daemon list. If no
	    details are specified, default parameters are used.

            @param[in] input details
            @param[out] output accountID
        -->
      <annotation name="com.trolltech.QtDBus.QtTypeName.In0" value="MapStringString"/>
      <arg type="a{ss}" name="details" direction="in"/>
      <arg type="s" name="createdAccountId" direction="out"/>
    </method>
    
    <method name="setAccountsOrder">
      <!--* Update the account list given a new list of accountID. If no account is specified
	    for a call, the first one in the list will be used.

            @param[in] input order
        -->
      <arg type="s" name="order" direction="in"/>
    </method>
    
    <method name="removeAccount">
      <!--* Delete an account from SFLphone-daemon list and erase
	    account parameters from configuration file. 

            @param[in] input accountID
        -->
      <arg type="s" name="accoundID" direction="in"/>
    </method>
    
    <method name="getAccountList">
      <!--* Get teh accountlist as stored in SFLphone-daemon.

            @param[in] input accountID
        -->
      <annotation name="com.trolltech.QtDBus.QtTypeName.Out0" value="VectorString"/>
      <arg type="as" name="list" direction="out"/>
    </method>
   
    <method name="sendRegister">
      <!--* Send accout registration request to PBX server. Register
	    the account if expire=1, unregister if expire=0.

            @param[in] input accountID
        -->
      <arg type="s" name="accountID" direction="in"/>
      <arg type="i" name="expire" direction="in"/>
    </method>

   <!--      ///////////////////////               -->

  <!-- Various audio-related methods   -->
 
    <method name="getToneLocaleList">
      <annotation name="com.trolltech.QtDBus.QtTypeName.Out0" value="VectorString"/>
      <arg type="as" name="list" direction="out"/>
    </method>
  
    <method name="getVersion">
      <arg type="s" name="version" direction="out"/>
    </method>
    
    <method name="getRingtoneList">
      <annotation name="com.trolltech.QtDBus.QtTypeName.Out0" value="VectorString"/>
      <arg type="as" name="list" direction="out"/>
    </method>
   
    <method name="getPlaybackDeviceList">
      <annotation name="com.trolltech.QtDBus.QtTypeName.Out0" value="VectorString"/>
      <arg type="as" name="list" direction="out"/>
    </method>
    
    <method name="getRecordDeviceList">
      <annotation name="com.trolltech.QtDBus.QtTypeName.Out0" value="VectorString"/>
      <arg type="as" name="list" direction="out"/>
    </method>
    
    <method name="isRingtoneEnabled">
      <arg type="i" name="bool" direction="out"/>
    </method>

    <method name="ringtoneEnabled">
    </method>

    <method name="getRingtoneChoice">
      <arg type="s" name="tone" direction="out"/>
    </method>

    <method name="setRingtoneChoice">
      <arg type="s" name="tone" direction="in"/>
    </method>

    <method name="getAudioManager">
      <arg type="i" name="api" direction="out"/>
    </method>

    <method name="setAudioManager">
      <arg type="i" name="api" direction="in"/>
    </method>
    
    <method name="getRecordPath">
      <arg type="s" name="rec" direction="out"/>
    </method>

    <method name="setRecordPath">
      <arg type="s" name="rec" direction="in"/>
    </method>

   <!--      ///////////////////////               -->
   
   <!-- Codecs-related methods -->
 
    <method name="getCodecList">
      <annotation name="com.trolltech.QtDBus.QtTypeName.Out0" value="VectorString"/>
      <arg type="as" name="list" direction="out"/>
    </method>
       
   <method name="getCodecDetails">
     <arg type="i" name="payload" direction="in"/>
     <annotation name="com.trolltech.QtDBus.QtTypeName.Out0" value="VectorString"/>
     <arg type="as" name="details" direction="out"/>
   </method>
 
    <method name="getActiveCodecList">
      <annotation name="com.trolltech.QtDBus.QtTypeName.Out0" value="VectorString"/>
	  <arg type="s" name="accountID" direction="in"/>
      <arg type="as" name="list" direction="out"/>
    </method>

    <method name="setActiveCodecList">
      <annotation name="com.trolltech.QtDBus.QtTypeName.In0" value="VectorString"/>
      <arg type="as" name="list" direction="in"/>
      <arg type="s" name="accountID" direction="in"/>
    </method>


	<!-- Audio devices methods -->
	
    <method name="getInputAudioPluginList">
      <annotation name="com.trolltech.QtDBus.QtTypeName.Out0" value="VectorString"/>
      <arg type="as" name="list" direction="out"/>
    </method>
		
    <method name="getOutputAudioPluginList">
      <annotation name="com.trolltech.QtDBus.QtTypeName.Out0" value="VectorString"/>
      <arg type="as" name="list" direction="out"/>
    </method>
    
    <method name="setInputAudioPlugin">
      <arg type="s" name="audioPlugin" direction="in"/>
    </method>
    
    <method name="setOutputAudioPlugin">
      <arg type="s" name="audioPlugin" direction="in"/>
    </method>
    
    <method name="getAudioOutputDeviceList">
      <annotation name="com.trolltech.QtDBus.QtTypeName.Out0" value="VectorString"/>
      <arg type="as" name="list" direction="out"/>
    </method>
    
    <method name="setAudioOutputDevice">
      <arg type="i" name="index" direction="in"/>
    </method>
    
    <method name="getAudioInputDeviceList">
      <annotation name="com.trolltech.QtDBus.QtTypeName.Out0" value="VectorString"/>
      <arg type="as" name="list" direction="out"/>
    </method>
    
    <method name="setAudioInputDevice">
      <arg type="i" name="index" direction="in"/>
    </method>
    
    <method name="getCurrentAudioDevicesIndex">
      <annotation name="com.trolltech.QtDBus.QtTypeName.Out0" value="VectorString"/>
      <arg type="as" name="list" direction="out"/>
    </method>

    <method name="getAudioDeviceIndex">
      <arg type="s" name="name" direction="in"/>
      <arg type="i" name="index" direction="out"/>
    </method>

    <method name="getCurrentAudioOutputPlugin">
      <arg type="s" name="plugin" direction="out"/>
    </method>

  <!--    General Settings Panel         -->

    <method name="isMd5CredentialHashing">
      <arg type="b" name="res" direction="out"/>
    </method>

    <method name="setMd5CredentialHashing">
      <arg type="b" name="enabled" direction="in"/>
    </method>
     
    <method name="isIax2Enabled">
      <arg type="i" name="res" direction="out"/>
    </method>

    <method name="setNotify">
    </method>

    <method name="getNotify">
      <arg type="i" name="level" direction="out"/>
    </method>

    <method name="setMailNotify">
    </method>

    <method name="getMailNotify">
      <arg type="i" name="level" direction="out"/>
    </method>

    <method name="getDialpad">
      <arg type="i" name="state" direction="out"/>
    </method>

    <method name="setDialpad">
      <arg type="b" name="display" direction="in"/>
    </method>

    <method name="getSearchbar">
      <arg type="i" name="state" direction="out"/>
    </method>

    <method name="setSearchbar">
    </method>

    <method name="setHistoryEnabled">
    </method>

    <method name="getHistoryEnabled">
      <arg type="s" name="state" direction="out"/>
    </method>

    <method name="getVolumeControls">
      <arg type="i" name="state" direction="out"/>
    </method>

    <method name="setVolumeControls">
      <arg type="b" name="display" direction="in"/>
    </method>

    <method name="getHistoryLimit">
      <arg type="i" name="days" direction="out"/>
    </method>

    <method name="setHistoryLimit">
      <arg type="i" name="days" direction="in"/>
    </method>

    <method name="startHidden">
    </method>

    <method name="isStartHidden">
      <arg type="i" name="state" direction="out"/>
    </method>

    <method name="popupMode">
      <arg type="i" name="state" direction="out"/>
    </method>

    <method name="switchPopupMode">
    </method>


    <!-- Addressbook configuration -->
    <method name="getAddressbookSettings">
      <annotation name="com.trolltech.QtDBus.QtTypeName.Out0" value="MapStringInt"/>
      <arg type="a{si}" name="settings" direction="out"/>
    </method>

    <method name="setAddressbookSettings">
      <annotation name="com.trolltech.QtDBus.QtTypeName.In0" value="MapStringInt"/>
      <arg type="a{si}" name="settings" direction="in"/>
    </method>

	<!-- Addressbook list -->
    <method name="getAddressbookList">
      <annotation name="com.trolltech.QtDBus.QtTypeName.Out0" value="VectorString"/>
      <arg type="as" name="settings" direction="out"/>
    </method>

    <method name="setAddressbookList">
      <annotation name="com.trolltech.QtDBus.QtTypeName.In0" value="VectorString"/>
      <arg type="as" name="settings" direction="in"/>
    </method>

    <!-- Hook configuration -->
    <method name="getHookSettings">
      <annotation name="com.trolltech.QtDBus.QtTypeName.Out0" value="MapStringString"/>
      <arg type="a{ss}" name="settings" direction="out"/>
    </method>

    <method name="setHookSettings">
      <annotation name="com.trolltech.QtDBus.QtTypeName.In0" value="MapStringString"/>
      <arg type="a{ss}" name="settings" direction="in"/>
    </method>

    <method name="getHistory">
        <annotation name="com.trolltech.QtDBus.QtTypeName.Out0" value="MapStringString"/>
        <arg type="a{ss}" name="entries" direction="out"/>
    </method>

    <method name="setHistory">
        <annotation name="com.trolltech.QtDBus.QtTypeName.In0" value="MapStringString"/>
        <arg type="a{ss}" name="entries" direction="in"/>
    </method>
      
    <signal name="accountsChanged">
    </signal>  

    <signal name="errorAlert">
      <arg type="i" name="code" direction="out"/>
    </signal> 
    
    <!-- TLS Methods -->
    <method name="getSupportedTlsMethod">
      <annotation name="com.trolltech.QtDBus.QtTypeName.Out0" value="VectorString"/>
      <arg type="as" name="list" direction="out"/>
    </method>

    <method name="getTlsSettingsDefault">
      <arg type="a{ss}" name="details" direction="out"/>
    </method>

    <method name="getTlsSettings">
      <arg type="s" name="accountID" direction="in"/>
      <annotation name="com.trolltech.QtDBus.QtTypeName.Out0" value="MapStringString"/>
      <arg type="a{ss}" name="details" direction="out"/>
    </method>
    
    <method name="setTlsSettings">
      <annotation name="com.trolltech.QtDBus.QtTypeName.In1" value="MapStringString"/>
      <arg type="s" name="accountID" direction="in"/>
      <arg type="a{ss}" name="details" direction="in"/>
    </method>

    <method name="getAddrFromInterfaceName">
      <arg type="s" name="interface" direction="in"/>
      <arg type="s" name="address" direction="out"/>
    </method>

    <method name="getAllIpInterface">
      <annotation name="com.trolltech.QtDBus.QtTypeName.Out0" value="VectorString"/>
      <arg type="as" name="list" direction="out"/>
    </method>

    <method name="getAllIpInterfaceByName">
      <annotation name="com.trolltech.QtDBus.QtTypeName.Out0" value="VectorString"/>
      <arg type="as" name="list" direction="out"/>
    </method>
    
  </interface>
</node>
